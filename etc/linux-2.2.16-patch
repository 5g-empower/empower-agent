
Index: include/linux/netdevice.h
--- include/linux/netdevice.h.orig	Tue Jan  4 13:12:25 2000
+++ include/linux/netdevice.h	Mon Oct 30 10:02:27 2000
@@ -317,6 +317,47 @@
 	/* Semi-private data. Keep it at the end of device struct. */
 	struct dst_entry	*fastpath[NETDEV_FASTROUTE_HMASK+1];
 #endif
+	
+	/* Click polling support */
+	/*
+	 * polling is < 0 if the device does not support polling, == 0 if the
+	 * device supports polling but interrupts are on, and > 0 if polling
+	 * is on.
+	 */
+	int 			polling;
+	int			(*poll_on)(struct device *);
+	int			(*poll_off)(struct device *);
+	/* 
+	 * rx_poll returns to caller a linked list of sk_buff objects received
+	 * by the device. on call, the want argument specifies the number of
+	 * packets wanted. on return, the want argument specifies the number
+	 * of packets actually returned.
+	 */
+	struct sk_buff *	(*rx_poll)(struct device *, int *want);
+	/* 
+	 * refill rx dma ring. returns 0 if successful, 1 otherwise
+	 */
+	int			(*rx_refill)(struct device *);
+	/*
+	 * reuse skbuffs. returns 0 if successful, 1 otherwise
+	 */
+	int 			(*reuse_skbs)(struct sk_buff *skb,
+	    				      struct device *dev);
+	/* 
+	 * place a skbuff on the transmit ring, returns 0 if successful, 1
+	 * otherwise 
+	 */
+	int			(*tx_queue)(struct sk_buff *skb, 
+					    struct device *dev);
+	/* 
+	 * clean tx dma ring. returns the number of unsent packets pending on
+	 * the tx ring 
+	 */
+	int			(*tx_clean)(struct device *);
+	/* 
+	 * start transmission. returns 0 if successful, 1 otherwise
+	 */
+	int			(*tx_start)(struct device *dev);
 };
 
 
@@ -354,6 +395,11 @@
 extern int		unregister_netdevice(struct device *dev);
 extern int 		register_netdevice_notifier(struct notifier_block *nb);
 extern int		unregister_netdevice_notifier(struct notifier_block *nb);
+extern int 		register_net_in(struct notifier_block *nb); /* Click */
+extern int		unregister_net_in(struct notifier_block *nb); /* Click */
+extern int 		register_net_out(struct notifier_block *nb); /* Click */
+extern int		unregister_net_out(struct notifier_block *nb); /* Click */
+extern void		ptype_dispatch(struct sk_buff *skb, unsigned short type); /* Click */
 extern int		dev_new_index(void);
 extern struct device	*dev_get_by_index(int ifindex);
 extern int		dev_restart(struct device *dev);

Index: include/linux/signal.h
--- include/linux/signal.h.orig	Tue May 11 13:35:43 1999
+++ include/linux/signal.h	Sat Oct 28 16:55:03 2000
@@ -189,7 +189,7 @@
 		memset(&set->sig[1], 0, sizeof(long)*(_NSIG_WORDS-1));
 		break;
 	case 2: set->sig[1] = 0;
-	case 1:
+	case 1: ;
 	}
 }
 
@@ -201,7 +201,7 @@
 		memset(&set->sig[1], -1, sizeof(long)*(_NSIG_WORDS-1));
 		break;
 	case 2: set->sig[1] = -1;
-	case 1:
+	case 1: ;
 	}
 }
 

Index: include/linux/skbuff.h
--- include/linux/skbuff.h.orig	Thu May 13 13:33:17 1999
+++ include/linux/skbuff.h	Mon Oct 30 10:02:17 2000
@@ -145,6 +145,8 @@
 extern struct sk_buff *		skb_peek_copy(struct sk_buff_head *list);
 extern struct sk_buff *		alloc_skb(unsigned int size, int priority);
 extern struct sk_buff *		dev_alloc_skb(unsigned int size);
+extern void			skb_recycled_init(struct sk_buff *buf);
+extern struct sk_buff *		skb_recycle(struct sk_buff *buf);
 extern void			kfree_skbmem(struct sk_buff *skb);
 extern struct sk_buff *		skb_clone(struct sk_buff *skb, int priority);
 extern struct sk_buff *		skb_copy(struct sk_buff *skb, int priority);
@@ -491,7 +493,7 @@
 	return skb->data;
 }
 
-extern __inline__ char *__skb_pull(struct sk_buff *skb, unsigned int len)
+extern __inline__ unsigned char *__skb_pull(struct sk_buff *skb, unsigned int len)
 {
 	skb->len-=len;
 	return 	skb->data+=len;
@@ -551,10 +553,15 @@
 extern __inline__ struct sk_buff *dev_alloc_skb(unsigned int length)
 {
 	struct sk_buff *skb;
+#if 0
+#define SKB_RESERVE_LENGTH 32
+#else
+#define SKB_RESERVE_LENGTH 16
+#endif
 
-	skb = alloc_skb(length+16, GFP_ATOMIC);
+	skb = alloc_skb(length+SKB_RESERVE_LENGTH, GFP_ATOMIC);
 	if (skb)
-		skb_reserve(skb,16);
+		skb_reserve(skb,SKB_RESERVE_LENGTH);
 	return skb;
 }
 

Index: net/core/skbuff.c
--- net/core/skbuff.c.orig	Sun Mar  7 13:12:18 1999
+++ net/core/skbuff.c	Mon Oct 30 15:23:15 2000
@@ -257,6 +257,82 @@
 	return n;
 }
 
+
+/* Click: resets a skb that was recycled */
+void
+skb_recycled_init(struct sk_buff *skb)
+{
+  // copied from skb_headerinit
+  if (skb->destructor)
+    skb->destructor = NULL;
+  if (skb->pkt_type != PACKET_HOST) 
+    skb->pkt_type = PACKET_HOST;    /* Default type */
+  if (skb->pkt_bridged != 0)
+    skb->pkt_bridged = 0;           /* Not bridged */
+  if (skb->prev != NULL)
+    skb->prev = NULL;
+  if (skb->next != NULL)
+    skb->next = NULL;
+  if (skb->list != NULL) 
+    skb->list = NULL;
+  if (skb->sk != NULL)
+    skb->sk = NULL;
+  if (skb->stamp.tv_sec != 0)
+    skb->stamp.tv_sec=0;    /* No idea about time */
+  if (skb->ip_summed != 0) 
+    skb->ip_summed = 0;
+  if (skb->security != 0)
+    skb->security = 0;      /* By default packets are insecure */
+  if (skb->dst != NULL)
+    skb->dst = NULL;
+  if (skb->priority != 0) 
+    skb->priority = 0;
+  memset(skb->cb, 0, sizeof(skb->cb));
+
+  /* Load the data pointers. */
+  skb->data = skb->head;
+  skb->tail = skb->data;
+  /* end and truesize should have never changed */
+  /* skb->end = skb->data + skb->truesize; */
+
+  /* set up other state */
+  skb->len = 0;
+  if (skb->is_clone != 0) 
+    skb->is_clone = 0;
+  if (skb->cloned != 0) 
+    skb->cloned = 0;
+
+  if (atomic_read(&skb->users) != 1) 
+    atomic_set(&skb->users, 1);
+  if (atomic_read(skb_datarefp(skb)) != 1) 
+    atomic_set(skb_datarefp(skb), 1);
+}
+
+/* Click: attempts to recycle a sk_buff. if it can be recycled, return it. */
+struct sk_buff *skb_recycle(struct sk_buff *skb)
+{ 
+  if (atomic_dec_and_test(&skb->users)) { 
+    
+    dst_release(skb->dst); 
+    if(skb->destructor) skb->destructor(skb);
+	
+    if (!skb->cloned || atomic_dec_and_test(skb_datarefp(skb))) { 
+      /* don't clean state using skb_headerinit and reset data pointers, leave
+       * it for driver to call skb_recycled_init. this is for cache locality
+       * reasons in smp mode */ 
+      return skb;
+    } 
+    
+    else { 
+      skb_headerinit(skb, NULL, 0);  /* clean state */ 
+      kmem_cache_free(skbuff_head_cache, skb); 
+      atomic_dec(&net_skbcount); 
+    }
+  }
+  return 0;
+}
+
+
 /*
  *	This is slower, and copies the whole data area 
  */

Index: net/core/dev.c
--- net/core/dev.c.orig	Wed Jun  7 17:26:44 2000
+++ net/core/dev.c	Sat Oct 28 16:50:24 2000
@@ -151,6 +151,9 @@
  
 static struct notifier_block *netdev_chain=NULL;
 
+/* input packet handlers -- might steal packets from net_bh(). for Click. */
+static struct notifier_block *net_in_chain = 0;
+
 /*
  *	Device drivers call our routines to queue packets here. We empty the
  *	queue in the bottom half handler.
@@ -332,6 +335,8 @@
 		kfree(dev);
 		return NULL;
 	}
+	/* by default, no polling support */
+	dev->polling = -1; 
 	return dev;
 }
 
@@ -509,6 +514,22 @@
 }
 
 /*
+ * Allow Click modules to ask to intercept input packets.
+ * Must add these to ../netsyms.c
+ */
+int
+register_net_in(struct notifier_block *nb)
+{
+  return(notifier_chain_register(&net_in_chain, nb));
+}
+
+int
+unregister_net_in(struct notifier_block *nb)
+{
+  return(notifier_chain_unregister(&net_in_chain, nb));
+}
+
+/*
  *	Support routine. Sends outgoing frames to any network
  *	taps currently in use.
  */
@@ -830,6 +851,86 @@
 }
 #endif
 
+
+/*
+ * Hand a packet to the ordinary Linux protocol stack.
+ * Broke this out from net_bh() so that Click can call it.
+ * Always frees the skb one way or another.
+ *
+ * skb->pkt_type needs to be set to PACKET_{BROADCAST,MULTICAST,OTHERHOST}
+ * maybe skb->mac.raw must point to ether header.
+ * skb->protocol must be set to a htons(ETHERTYPE_?).
+ * skb->data must point to the ethernet payload (e.g. the IP header).
+ * skb->nh.raw must point to the ethernet payload also.
+ */
+void
+ptype_dispatch(struct sk_buff *skb, unsigned short type)
+{
+	struct packet_type *ptype;
+	struct packet_type *pt_prev;
+
+		/*
+		 *	We got a packet ID.  Now loop over the "known protocols"
+		 * 	list. There are two lists. The ptype_all list of taps (normally empty)
+		 *	and the main protocol list which is hashed perfectly for normal protocols.
+		 */
+
+		pt_prev = NULL;
+		for (ptype = ptype_all; ptype!=NULL; ptype=ptype->next)
+		{
+			if (!ptype->dev || ptype->dev == skb->dev) {
+				if(pt_prev)
+				{
+					struct sk_buff *skb2=skb_clone(skb, GFP_ATOMIC);
+					if(skb2)
+						pt_prev->func(skb2,skb->dev, pt_prev);
+				}
+				pt_prev=ptype;
+			}
+		}
+
+		for (ptype = ptype_base[ntohs(type)&15]; ptype != NULL; ptype = ptype->next) 
+		{
+			if (ptype->type == type && (!ptype->dev || ptype->dev==skb->dev))
+			{
+				/*
+				 *	We already have a match queued. Deliver
+				 *	to it and then remember the new match
+				 */
+				if(pt_prev)
+				{
+					struct sk_buff *skb2;
+
+					skb2=skb_clone(skb, GFP_ATOMIC);
+
+					/*
+					 *	Kick the protocol handler. This should be fast
+					 *	and efficient code.
+					 */
+
+					if(skb2)
+						pt_prev->func(skb2, skb->dev, pt_prev);
+				}
+				/* Remember the current last to do */
+				pt_prev=ptype;
+			}
+		} /* End of protocol list loop */
+
+		/*
+		 *	Is there a last item to send to ?
+		 */
+
+		if(pt_prev)
+			pt_prev->func(skb, skb->dev, pt_prev);
+		/*
+		 * 	Has an unknown packet has been received ?
+		 */
+	 
+		else {
+			kfree_skb(skb);
+		}
+}
+
 /*
  *	When we are called the queue is ready to grab, the interrupts are
  *	on and hardware can interrupt and queue to the receive queue as we
@@ -942,66 +1043,19 @@
 		handle_bridge(skb, type); 
 #endif
 
-		/*
-		 *	We got a packet ID.  Now loop over the "known protocols"
-		 * 	list. There are two lists. The ptype_all list of taps (normally empty)
-		 *	and the main protocol list which is hashed perfectly for normal protocols.
-		 */
+                /* does Click want to steal this packet? */
+                if(notifier_call_chain(&net_in_chain, skb_queue_len(&backlog), skb) & NOTIFY_STOP_MASK)
+                  continue;
 
-		pt_prev = NULL;
-		for (ptype = ptype_all; ptype!=NULL; ptype=ptype->next)
-		{
-			if (!ptype->dev || ptype->dev == skb->dev) {
-				if(pt_prev)
-				{
-					struct sk_buff *skb2=skb_clone(skb, GFP_ATOMIC);
-					if(skb2)
-						pt_prev->func(skb2,skb->dev, pt_prev);
-				}
-				pt_prev=ptype;
-			}
-		}
 
-		for (ptype = ptype_base[ntohs(type)&15]; ptype != NULL; ptype = ptype->next) 
-		{
-			if (ptype->type == type && (!ptype->dev || ptype->dev==skb->dev))
-			{
-				/*
-				 *	We already have a match queued. Deliver
-				 *	to it and then remember the new match
-				 */
-				if(pt_prev)
-				{
-					struct sk_buff *skb2;
+                /*
+                 * Ordinary Linux dispatch based on packet type.
+                 * Moved into a function so Click can call it.
+                 */
+                ptype_dispatch(skb, type);
 
-					skb2=skb_clone(skb, GFP_ATOMIC);
 
-					/*
-					 *	Kick the protocol handler. This should be fast
-					 *	and efficient code.
-					 */
 
-					if(skb2)
-						pt_prev->func(skb2, skb->dev, pt_prev);
-				}
-				/* Remember the current last to do */
-				pt_prev=ptype;
-			}
-		} /* End of protocol list loop */
-
-		/*
-		 *	Is there a last item to send to ?
-		 */
-
-		if(pt_prev)
-			pt_prev->func(skb, skb->dev, pt_prev);
-		/*
-		 * 	Has an unknown packet has been received ?
-		 */
-	 
-		else {
-			kfree_skb(skb);
-		}
   	}	/* End of queue loop */
   	
   	/*

Index: net/sched/sch_generic.c
--- net/sched/sch_generic.c.orig	Tue Oct 26 20:53:42 1999
+++ net/sched/sch_generic.c	Sat Oct 28 16:50:24 2000
@@ -76,6 +76,24 @@
 	return q->q.qlen;
 }
 
+/*
+ * Click hooks to be notified when a network device
+ * is idle and could send a packet.
+ */
+static struct notifier_block *net_out_chain = 0;
+
+int
+register_net_out(struct notifier_block *nb)
+{
+  return(notifier_chain_register(&net_out_chain, nb));
+}
+
+int
+unregister_net_out(struct notifier_block *nb)
+{
+  return(notifier_chain_unregister(&net_out_chain, nb));
+}
+
 /* Scan transmission queue and kick devices.
 
    Deficiency: slow devices (ppp) and fast ones (100Mb ethernet)
@@ -93,9 +111,14 @@
 	hp = &qdisc_head.forw;
 	while ((h = *hp) != &qdisc_head) {
 		int res = -1;
+                int res1 = -1;
 		struct Qdisc *q = (struct Qdisc*)h;
 		struct device *dev = q->dev;
 
+                /* Click */
+                if(dev->tbusy == 0)
+                  res1 = notifier_call_chain(&net_out_chain, 0, dev);
+
 		while (!dev->tbusy && (res = qdisc_restart(dev)) < 0)
 			/* NOTHING */;
 
@@ -108,7 +131,7 @@
 		   No problem, we will unlink it during the next round.
 		 */
 
-		if (res == 0 && *hp == h) {
+		if (res1 == 0 && res == 0 && *hp == h) {
 			*hp = h->forw;
 			h->forw = NULL;
 			continue;

Index: net/netsyms.c
--- net/netsyms.c.orig	Wed Jun  7 17:26:44 2000
+++ net/netsyms.c	Mon Oct 30 10:00:59 2000
@@ -454,6 +454,15 @@
 EXPORT_SYMBOL(unregister_inetaddr_notifier);
 #endif
 
+/* Click */
+EXPORT_SYMBOL(register_net_in);
+EXPORT_SYMBOL(unregister_net_in);
+EXPORT_SYMBOL(register_net_out);
+EXPORT_SYMBOL(unregister_net_out);
+EXPORT_SYMBOL(ptype_dispatch);
+struct inet_protocol *inet_get_protocol(unsigned char prot);
+EXPORT_SYMBOL(inet_get_protocol);
+
 /* support for loadable net drivers */
 #ifdef CONFIG_NET
 EXPORT_SYMBOL(loopback_dev);
@@ -477,6 +486,8 @@
 EXPORT_SYMBOL(eth_copy_and_sum);
 EXPORT_SYMBOL(alloc_skb);
 EXPORT_SYMBOL(__kfree_skb);
+EXPORT_SYMBOL(skb_recycled_init);
+EXPORT_SYMBOL(skb_recycle);
 EXPORT_SYMBOL(skb_clone);
 EXPORT_SYMBOL(skb_copy);
 EXPORT_SYMBOL(netif_rx);

Index: drivers/net/tulip.c
--- drivers/net/tulip.c.orig	Wed May  3 20:16:43 2000
+++ drivers/net/tulip.c	Mon Oct 30 18:29:57 2000
@@ -26,9 +26,6 @@
 
 /* A few user-configurable values. */
 
-/* Maximum events (Rx packets, etc.) to handle at each interrupt. */
-static int max_interrupt_work = 25;
-
 #define MAX_UNITS 8
 /* Used to pass the full-duplex flag, etc. */
 static int full_duplex[MAX_UNITS] = {0, };
@@ -148,10 +145,6 @@
 
 #define RUN_AT(x) (jiffies + (x))
 
-#if (LINUX_VERSION_CODE >= 0x20100)
-static char kernel_version[] = UTS_RELEASE;
-#endif
-
 #if LINUX_VERSION_CODE < 0x20123
 #define hard_smp_processor_id() smp_processor_id()
 #define test_and_set_bit(val, addr) set_bit(val, addr)
@@ -194,6 +187,26 @@
 static int tulip_debug = 1;
 #endif
 
+/* Polling extensions and extensions for recycling sk_buffs. */
+/* number of recycle buckets */
+#ifdef __SMP__
+#define SKB_BUCKETS		4
+#else
+#define SKB_BUCKETS		1
+#endif
+/* set to 0 if don't want to do recycle */
+#define SKB_RECYCLED	64
+/* demand polling */
+#define DEMAND_POLLTX	1
+
+static unsigned tulip_recycled_skb_size;
+static int tulip_recycled_skb_inuse[SKB_BUCKETS];
+static int tulip_recycled_skb_head[SKB_BUCKETS];
+static int tulip_recycled_skb_tail[SKB_BUCKETS];
+static unsigned long tulip_recycle_skb_lock[SKB_BUCKETS];
+static struct sk_buff *tulip_recycled_skbs[SKB_BUCKETS][SKB_RECYCLED];
+static void tulip_recycle_init(void);
+
 /*
 				Theory of Operation
 
@@ -494,15 +507,21 @@
 };
 
 struct tulip_private {
-	char devname[8];			/* Used only for kernel debugging. */
-	const char *product_name;
-	struct device *next_module;
+  	unsigned int cur_rx, dirty_rx;
+	unsigned int rx_reserved[6];
 	struct tulip_rx_desc rx_ring[RX_RING_SIZE];
+	/* The addresses of receive-in-place skbuffs. */
+	struct sk_buff* rx_skbuff[RX_RING_SIZE];
+
+	unsigned int cur_tx, dirty_tx;
+	unsigned int tx_reserved[6];
 	struct tulip_tx_desc tx_ring[TX_RING_SIZE];
 	/* The saved address of a sent-in-place packet/buffer, for skfree(). */
 	struct sk_buff* tx_skbuff[TX_RING_SIZE];
-	/* The addresses of receive-in-place skbuffs. */
-	struct sk_buff* rx_skbuff[RX_RING_SIZE];
+
+	char devname[8];			/* Used only for kernel debugging. */
+	const char *product_name;
+	struct device *next_module;
 	char *rx_buffs;				/* Address of temporary Rx buffers. */
 	u16 setup_frame[96];		/* Pseudo-Tx frame to init address table. */
 	int chip_id;
@@ -511,8 +530,6 @@
 	struct net_device_stats stats;
 	struct timer_list timer;	/* Media selection timer. */
 	int interrupt;				/* In-interrupt flag. */
-	unsigned int cur_rx, cur_tx;		/* The next free ring entry */
-	unsigned int dirty_rx, dirty_tx;	/* The ring entries to be free()ed. */
 	unsigned int tx_full:1;				/* The Tx queue is full. */
 	unsigned int full_duplex:1;			/* Full-duplex operation requested. */
 	unsigned int full_duplex_lock:1;
@@ -565,6 +582,16 @@
 #endif
 static void set_rx_mode(struct device *dev);
 
+/* device polling stuff */
+static int tulip_tx_queue(struct sk_buff *skb, struct device *dev);
+static int tulip_tx_start(struct device *dev);
+static int tulip_rx_refill(struct device *dev);
+static int tulip_reuse_skbs(struct sk_buff *skb, struct device *dev);
+static int tulip_tx_clean(struct device *dev);
+static struct sk_buff *tulip_rx_poll(struct device *dev, int *want);
+static int tulip_poll_on(struct device *dev);
+static int tulip_poll_off(struct device *dev);
+
 
 
 /* A list of all installed Tulip devices. */
@@ -812,6 +839,17 @@
 
 	dev->base_addr = ioaddr;
 	dev->irq = irq;
+	
+	/* Click - polling extensions */
+	dev->polling = 0;
+	dev->rx_poll = tulip_rx_poll;
+	dev->rx_refill = tulip_rx_refill;
+	dev->reuse_skbs = tulip_reuse_skbs;
+	dev->tx_clean = tulip_tx_clean;
+	dev->tx_queue = tulip_tx_queue;
+	dev->tx_start = tulip_tx_start;
+	dev->poll_off = tulip_poll_off;
+	dev->poll_on = tulip_poll_on;
 
 	tp->pci_bus = pci_bus;
 	tp->pci_devfn = pci_devfn;
@@ -2521,6 +2559,11 @@
 		tp->rx_skbuff[i] = skb;
 		if (skb == NULL)
 			break;
+		/* Click: save the size we need for these rings */
+		if (tulip_recycled_skb_size == 0) {
+		  	tulip_recycle_init();
+			tulip_recycled_skb_size = skb->truesize;
+		}
 		skb->dev = dev;			/* Mark as being used by this device. */
 		tp->rx_ring[i].status = cpu_to_le32(DescOwned);	/* Owned by Tulip chip */
 		tp->rx_ring[i].buffer1 = virt_to_le32desc(skb->tail);
@@ -2537,22 +2580,36 @@
 	tp->tx_ring[i-1].buffer2 = virt_to_le32desc(&tp->tx_ring[0]);
 }
 
+/* start the tulip transmit process by doing an outb */
+static int
+tulip_tx_start(struct device *dev)
+{ 
+  if (dev->polling <= 0)
+    /* Trigger an immediate transmit demand. */ 
+    outl(0, dev->base_addr + CSR1); 
+  dev->trans_start = jiffies; 
+  return 0;
+}
+
 static int
 tulip_start_xmit(struct sk_buff *skb, struct device *dev)
 {
 	struct tulip_private *tp = (struct tulip_private *)dev->priv;
 	int entry;
 	u32 flag;
+	
+#if 0
+	if (dev->polling > 0) {
+	    printk("tulip_start_xmit when interrupt is off\n");
+	}
+#endif
 
-	/* Block a timer-based transmit from overlapping.  This could better be
-	   done with atomic_swap(1, dev->tbusy), but set_bit() works as well. */
 	if (test_and_set_bit(0, (void*)&dev->tbusy) != 0) {
-		if (jiffies - dev->trans_start < TX_TIMEOUT)
-			return 1;
-		tulip_tx_timeout(dev);
+		if (jiffies - dev->trans_start >= TX_TIMEOUT)
+		    tulip_tx_timeout(dev);
 		return 1;
 	}
-
+	
 	/* Caution: the write order is important here, set the field
 	   with the ownership bits last. */
 
@@ -2576,16 +2633,32 @@
 		flag = 0xe0000000 | DESC_RING_WRAP;
 
 	tp->tx_ring[entry].length = cpu_to_le32(skb->len | flag);
+	/* new linux memory barrier thingie */
+	wmb();
 	tp->tx_ring[entry].status = cpu_to_le32(DescOwned);
 	tp->cur_tx++;
-	if ( ! tp->tx_full)
-		clear_bit(0, (void*)&dev->tbusy);
+	
+	tulip_tx_start(dev);
+	
+	if (!tp->tx_full) 
+	    clear_bit(0, (void*)&dev->tbusy);
+		
+	return 0;
+}
 
-	dev->trans_start = jiffies;
-	/* Trigger an immediate transmit demand. */
-	outl(0, dev->base_addr + CSR1);
+/* polling extension - intr stats */
+void (*tulip_interrupt_hook)(struct device *, unsigned);
 
-	return 0;
+static __inline__ unsigned long long
+tulip_get_cycles(void)
+{
+    unsigned long low, high;
+    unsigned long long x;
+    __asm__ __volatile__("rdtsc":"=a" (low), "=d" (high));
+    x = high;
+    x <<= 32;
+    x |= low;
+    return(x);
 }
 
 /* The interrupt handler does all of the Rx thread work and cleans up
@@ -2597,13 +2670,13 @@
 	long ioaddr = dev->base_addr;
 	int csr5;
 	int entry;
-	int missed;
 	int rx = 0;
 	int tx = 0;
 	int oi = 0;
 	int maxrx = RX_RING_SIZE;
 	int maxtx = TX_RING_SIZE;
 	int maxoi = TX_RING_SIZE;
+	int first_time = 1;
 
 #if defined(__i386__) && defined(SMP_CHECK)
 	if (test_and_set_bit(0, (void*)&dev->interrupt)) {
@@ -2625,22 +2698,39 @@
 
 	do {
 		csr5 = inl(ioaddr + CSR5);
+		
+		if ((csr5 & (NormalIntr|AbnormalIntr)) == 0) {
+			if (dev->polling > 0) goto out;
+			if (first_time) goto out;
+			else break;
+		}
+		first_time = 0;
+		
 		/* Acknowledge all of the current interrupt sources ASAP. */
 		outl(csr5 & 0x0001ffff, ioaddr + CSR5);
 
+		/* Notify tulip_interrupt_hook. */
+		if (tulip_interrupt_hook)
+			tulip_interrupt_hook(dev, CSR5);
+		
+		if (dev->polling > 0) {
+			if ((csr5 & (TxDied|TimerInt|AbnormalIntr))==0) goto out;
+		}
+
 		if (tulip_debug > 4)
 			printk(KERN_DEBUG "%s: interrupt  csr5=%#8.8x new csr5=%#8.8x.\n",
 				   dev->name, csr5, inl(dev->base_addr + CSR5));
 
-		if ((csr5 & (NormalIntr|AbnormalIntr)) == 0)
-			break;
-
-		if (csr5 & (RxIntr | RxNoBuf)) {
-			rx += tulip_rx(dev);
-			tulip_refill_rx(dev);
+		if ((csr5 & (RxIntr | RxNoBuf)) && !dev->polling) {
+		    rx += tulip_rx(dev);
+		    tulip_refill_rx(dev);
 		}
 
-		if (csr5 & (TxNoBuf | TxDied | TxIntr | TimerInt)) {
+		if ((csr5 & (TxNoBuf | TxDied | TxIntr | TimerInt)) 
+			&& !dev->polling) {
+		  	/* part of following code duplicated at the end
+			 * in tulip_tx_clean for the polling driver, changes
+			 * here should propagate to there as well */
 			unsigned int dirty_tx;
 
 			for (dirty_tx = tp->dirty_tx; tp->cur_tx - dirty_tx > 0;
@@ -2705,14 +2795,15 @@
 			}
 
 			tp->dirty_tx = dirty_tx;
-			if (csr5 & TxDied) {
-				if (tulip_debug > 2)
-					printk(KERN_WARNING "%s: The transmitter stopped."
-						   "  CSR5 is %x, CSR6 %x, new CSR6 %x.\n",
-						   dev->name, csr5, inl(ioaddr + CSR6), tp->csr6);
-				outl(tp->csr6 | 0x0002, ioaddr + CSR6);
-				outl(tp->csr6 | 0x2002, ioaddr + CSR6);
-			}
+		}
+
+		if (csr5 & TxDied) {
+			if (tulip_debug > 2)
+				printk(KERN_WARNING "%s: The transmitter stopped."
+					   "  CSR5 is %x, CSR6 %x, new CSR6 %x.\n",
+					   dev->name, csr5, inl(ioaddr + CSR6), tp->csr6);
+			outl(tp->csr6 | 0x0002, ioaddr + CSR6);
+			outl(tp->csr6 | 0x2002, ioaddr + CSR6);
 		}
 
 		/* Log errors. */
@@ -2731,8 +2822,11 @@
 				outl(0, ioaddr + CSR1);
 			}
 			if (csr5 & RxDied) {		/* Missed a Rx frame. */
+				unsigned csr8status = inl(ioaddr+CSR8);
+				unsigned fifostatus = csr8status>>17;
 				tp->stats.rx_errors++;
-				tp->stats.rx_missed_errors += inl(ioaddr + CSR8) & 0xffff;
+				tp->stats.rx_missed_errors += csr8status&0xffff;
+				tp->stats.rx_fifo_errors += fifostatus&0x7ff;
 				outl(tp->csr6 | 0x2002, ioaddr + CSR6);
 			}
 			if (csr5 & (TPLnkPass | TPLnkFail | 0x08000000)) {
@@ -2772,7 +2866,9 @@
 		}
 	} while (1);
 
-	tulip_refill_rx(dev);
+	if (!dev->polling) {
+		tulip_refill_rx(dev);
+	}
 
 	/* check if we card is in suspend mode */
 	entry = tp->dirty_rx % RX_RING_SIZE;
@@ -2790,14 +2886,17 @@
 		}
 	}
 
+#if 0
 	if ((missed = inl(ioaddr + CSR8) & 0x1ffff)) {
 		tp->stats.rx_dropped += missed & 0x10000 ? 0x10000 : missed;
 	}
+#endif
 
 	if (tulip_debug > 4)
 		printk(KERN_DEBUG "%s: exiting interrupt, csr5=%#4.4x.\n",
 			   dev->name, inl(ioaddr + CSR5));
 
+out:
 #if defined(__i386__)
 	clear_bit(0, (void*)&dev->interrupt);
 #else
@@ -2943,8 +3042,12 @@
 	if (tp->chip_id == DC21040)
 		outl(0x00000004, ioaddr + CSR13);
 
-	if (inl(ioaddr + CSR6) != 0xffffffff)
-		tp->stats.rx_missed_errors += inl(ioaddr + CSR8) & 0xffff;
+	if (inl(ioaddr + CSR6) != 0xffffffff) {
+		unsigned csr8status = inl(ioaddr+CSR8);
+		unsigned fifostatus = csr8status>>17;
+		tp->stats.rx_missed_errors += csr8status&0xffff;
+		tp->stats.rx_fifo_errors += fifostatus&0x7ff;
+	}
 
 	del_timer(&tp->timer);
 
@@ -2987,9 +3090,14 @@
 	struct tulip_private *tp = (struct tulip_private *)dev->priv;
 	long ioaddr = dev->base_addr;
 
-	if (dev->start)
-		tp->stats.rx_missed_errors += inl(ioaddr + CSR8) & 0xffff;
-
+	if (dev->start) {
+  		unsigned csr8status = inl(ioaddr+CSR8);
+        unsigned fifostatus = csr8status>>17;
+		unsigned missed = csr8status & 0x1ffff;
+		tp->stats.rx_dropped += missed & 0x10000 ? 0x10000 : missed;
+	  	tp->stats.rx_missed_errors += csr8status&0xffff;
+        tp->stats.rx_fifo_errors += fifostatus&0x7ff;
+	}
 	return &tp->stats;
 }
 
@@ -3186,7 +3294,7 @@
 			/* Same setup recently queued, we need not add it. */
 		} else {
 			unsigned long flags;
-			unsigned int entry;
+			unsigned int entry, dummy = 0;
 
 			save_flags(flags); cli();
 			entry = tp->cur_tx++ % TX_RING_SIZE;
@@ -3197,7 +3305,12 @@
 				tp->tx_ring[entry].length =
 					(entry == TX_RING_SIZE-1) ? cpu_to_le32(DESC_RING_WRAP) : 0;
 				tp->tx_ring[entry].buffer1 = 0;
+#if 1
+      				/* race with chip, set DescOwned later */
+		 		dummy = entry;
+#else
 				tp->tx_ring[entry].status = cpu_to_le32(DescOwned);
+#endif
 				entry = tp->cur_tx++ % TX_RING_SIZE;
 			}
 
@@ -3212,6 +3325,10 @@
 				set_bit(0, (void*)&dev->tbusy);
 				tp->tx_full = 1;
 			}
+#if 1
+            		if (dummy >= 0) 
+	      			tp->tx_ring[dummy].status = cpu_to_le32(DescOwned);
+#endif
 			restore_flags(flags);
 			/* Trigger an immediate transmit demand. */
 			outl(0, ioaddr + CSR1);
@@ -3356,3 +3473,381 @@
  *  tab-width: 4
  * End:
  */
+
+
+/*
+ * Polling Extension
+ *
+ * Most of the following functions are verbatim, or very similar to, code from
+ * the interrupt routines. They are cleaned up and tuned for polling. 
+ *
+ * Very minimal synchronization occurs: most polling functions are suppose to
+ * be used in polling mode, under which case the interrupt handler is
+ * disallowed from touching the rx and tx ring. Callers of polling functions
+ * are expected to synchronize calls to these functions themselves.
+ *
+ * dev->tbusy was used by Linux's original tulip driver to synchronize the
+ * send pkt routine (tulip_start_xmit) and timer based send. I am using it
+ * also to synchronize tx queueing.
+ */
+
+static void
+tulip_recycle_init(void)
+{
+  int i;
+  for(i = 0; i < SKB_BUCKETS; i++) {
+    tulip_recycled_skb_inuse[i] = 0;
+    tulip_recycled_skb_head[i] = 0;
+    tulip_recycled_skb_tail[i] = 0;
+    tulip_recycle_skb_lock[i] = 0;
+  }
+}
+
+/* WARNING: these functions are not reentrant! */
+static inline struct sk_buff*
+tulip_get_recycled_skb(void)
+{ 
+  struct sk_buff* skb = 0; 
+  int bucket = current->processor % SKB_BUCKETS; 
+  tulip_recycled_skb_inuse[bucket] = 1;
+
+  if (tulip_recycled_skb_head[bucket] != tulip_recycled_skb_tail[bucket]) {
+	if (smp_num_cpus > SKB_BUCKETS) {
+	  while (test_and_set_bit (0, (void*)&tulip_recycle_skb_lock[bucket])) { 
+		while(tulip_recycle_skb_lock[bucket]) 
+		  asm volatile("" ::: "memory"); 
+	  }
+	} 
+	if (tulip_recycled_skb_head[bucket] != tulip_recycled_skb_tail[bucket]) {
+	  skb = tulip_recycled_skbs[bucket][tulip_recycled_skb_head[bucket]]; 
+	  tulip_recycled_skb_head[bucket]++;
+	  if (tulip_recycled_skb_head[bucket] == SKB_RECYCLED) 
+		tulip_recycled_skb_head[bucket] = 0;
+	  skb_recycled_init(skb);
+	} 
+	if (smp_num_cpus > SKB_BUCKETS)
+	  clear_bit(0, (void*)&tulip_recycle_skb_lock[bucket]); 
+  } 
+#if 0
+  if (skb == 0) 
+	printk("%d: need to create packet %d %d.\n", 
+		    current->processor,
+			tulip_recycled_skb_head[bucket],
+			tulip_recycled_skb_tail[bucket]);
+#endif
+  return skb;
+}
+
+#define SKB_RECYCLE_THRESH SKB_RECYCLED
+
+/* tries to recycle an skb. if not successful, the skb passed in is freed */
+static inline int
+tulip_recycle_or_free_skb(struct sk_buff *skb)
+{ 
+  int recycled = 0;
+  if (skb->truesize == tulip_recycled_skb_size) {
+	int i, min_size, bucket, tail, next, size;
+	bucket = current->processor % SKB_BUCKETS;
+
+	if (tulip_recycled_skb_head[bucket] <= tulip_recycled_skb_tail[bucket])
+	  size = tulip_recycled_skb_tail[bucket] - tulip_recycled_skb_head[bucket];
+	else
+	  size = tulip_recycled_skb_tail[bucket] + SKB_RECYCLED + 1
+	         - tulip_recycled_skb_head[bucket];
+	/* local queue fairly full, see if anyone else wants the packet */
+	if (size >= SKB_RECYCLE_THRESH) 
+	{
+	  min_size = size;
+	  for (i=0; i < SKB_BUCKETS; i++) {
+		if (i == bucket) continue;
+	    if (tulip_recycled_skb_inuse[i]) {
+	      if (tulip_recycled_skb_head[i] <= tulip_recycled_skb_tail[i]) {
+	        size = tulip_recycled_skb_tail[i] - tulip_recycled_skb_head[i];
+	      } else {
+	        size = tulip_recycled_skb_tail[i] + SKB_RECYCLED + 1
+		           - tulip_recycled_skb_head[i];
+	      }
+	      if (size < min_size || min_size == -1) {
+	  	    min_size = size;
+	  	    bucket = i;
+	      }
+	    }
+	  }
+	}
+
+	while (test_and_set_bit (0, (void*)&tulip_recycle_skb_lock[bucket])) { 
+	  while(tulip_recycle_skb_lock[bucket]) asm volatile("" ::: "memory"); 
+	}
+	tail = tulip_recycled_skb_tail[bucket];
+	next = tail+1;
+	if (next == SKB_RECYCLED) next = 0;
+	if (next != tulip_recycled_skb_head[bucket]) {
+	  if (skb_recycle(skb)) {
+		tulip_recycled_skbs[bucket][tail] = skb;
+		tulip_recycled_skb_tail[bucket] = next;
+		recycled = 1;
+	  }
+	  skb = 0;
+	}
+	clear_bit(0, (void*)&tulip_recycle_skb_lock[bucket]);
+  }
+  if (skb != 0) {
+#if 0
+	printk("%d: need to clear packet.\n", current->processor);
+#endif
+	dev_kfree_skb(skb);
+  }
+  return recycled;
+}
+
+int 
+tulip_rx_refill(struct device *dev)
+{
+  	struct tulip_private *tp = (struct tulip_private *)dev->priv;
+	
+  	/* Refill the Rx ring buffers. */
+  	for (; tp->cur_rx - tp->dirty_rx > 0; tp->dirty_rx++) { 
+		int entry = tp->dirty_rx % RX_RING_SIZE;
+
+    	if (tp->rx_skbuff[entry] == NULL) {
+      		struct sk_buff *skb = tulip_get_recycled_skb();
+
+			if (skb)
+        		tp->rx_skbuff[entry] = skb;
+			else {
+        		skb = tp->rx_skbuff[entry] = dev_alloc_skb(PKT_BUF_SZ);
+        		if (skb == NULL)
+					return 1;
+      		}
+      		skb->dev = dev; /* mark as being used by this device. */
+      		tp->rx_ring[entry].buffer1 = virt_to_le32desc(skb->tail);
+    	}
+    	tp->rx_ring[entry].status = cpu_to_le32(DescOwned);
+  	}
+  	return 0;
+}
+
+static struct sk_buff *
+tulip_rx_poll(struct device *dev, int *want)
+{
+  	struct tulip_private *tp = (struct tulip_private *)dev->priv;
+	int rx_work_limit = tp->dirty_rx + RX_RING_SIZE - tp->cur_rx;
+  	int entry = tp->cur_rx % RX_RING_SIZE;
+  	struct sk_buff *skb_head, *skb_last;
+  	int got = 0;
+ 
+  	skb_head = skb_last = NULL;
+
+  	while (! (tp->rx_ring[entry].status & cpu_to_le32(DescOwned))) {
+    	s32 status = le32_to_cpu(tp->rx_ring[entry].status);
+    	if (--rx_work_limit < 0 || got == *want) break; 
+
+    	if ((status & 0x38008300) != 0x0300) {
+    		if ((status & 0x38000300) != 0x0300) {
+				/* Ignore earlier buffers. */ 
+      			if ((status & 0xffff) != 0x7fff) { 
+					if (tulip_debug > 1) 
+					  printk(KERN_WARNING "%s: Oversized Ethernet frame "
+						     "spanned " "multiple buffers, status %8.8x!\n", 
+							 dev->name, status); 
+					tp->stats.rx_length_errors++; 
+      			}
+    		} else if (status & RxDescFatalErr) {
+			  	/* There was a fatal error */
+      			if (tulip_debug > 2) 
+					printk(KERN_DEBUG "%s: Receive error, Rx status %8.8x.\n", 
+					   	   dev->name, status); 
+      			tp->stats.rx_errors++; /* end of a packet.*/ 
+      			if (status & 0x0890) tp->stats.rx_length_errors++; 
+      			if (status & 0x0004) tp->stats.rx_frame_errors++; 
+      			if (status & 0x0002) tp->stats.rx_crc_errors++; 
+      			if (status & 0x0001) tp->stats.rx_fifo_errors++; 
+    		}
+		} else {
+      		/* Omit the four octet CRC from the length. */ 
+      		short pkt_len = ((status >> 16) & 0x7ff) - 4; 
+      		struct sk_buff *skb = tp->rx_skbuff[entry]; 
+			int p;
+      		tp->rx_skbuff[entry] = NULL;
+
+      		skb_put(skb, pkt_len); 
+
+			p = eth_type_trans(skb, dev);
+			if (skb->protocol != p)
+      		  skb->protocol = p;
+
+      		tp->stats.rx_packets++;
+      		tp->stats.rx_bytes += pkt_len;
+
+      		if (got == 0) {
+				skb_head = skb;
+				skb_last = skb;
+				skb_last->next = NULL;
+				skb_last->prev = NULL;
+      		} else {
+				skb_last->next = skb;
+				skb->prev = skb_last;
+				skb->next = NULL;
+				skb_last = skb;
+      		}
+      		got++;
+    	}
+    	entry = (++tp->cur_rx) % RX_RING_SIZE; 
+  	}
+  	dev->last_rx = jiffies; 
+  	*want = got;
+  	return skb_head;
+}
+
+
+static int
+tulip_poll_on(struct device *dev)
+{
+	long ioaddr = dev->base_addr;
+	int csr7;
+#ifdef DEMAND_POLLTX
+	int csr0; 
+#endif
+	if (!dev->polling) {
+		csr7 = inl(ioaddr + CSR7) & ~(NormalIntr|RxNoBuf|RxIntr|TxIntr|TxNoBuf);
+		outl(csr7, ioaddr+CSR7);
+#ifdef DEMAND_POLLTX
+		csr0 = (inl(ioaddr + CSR0) & ~(7<<17)) | (4<<17);
+		outl(csr0, ioaddr+CSR0);
+#endif
+		dev->polling = 1;
+	}
+	return 0;
+}
+
+static int
+tulip_poll_off(struct device *dev)
+{
+	long ioaddr = dev->base_addr;
+	int csr7;
+#ifdef DEMAND_POLLTX
+	int csr0;
+#endif
+	if (dev->polling > 0) {
+#ifdef DEMAND_POLLTX
+		csr0 = inl(ioaddr + CSR0) & ~(7<<17);
+		outl(csr0, ioaddr+CSR0);
+#endif
+		csr7 = inl(ioaddr + CSR7) | (NormalIntr|RxNoBuf|RxIntr|TxIntr|TxNoBuf);
+		outl(csr7, ioaddr+CSR7);
+		dev->polling = 0;
+	}
+	return 0;
+}
+
+static int
+tulip_tx_queue(struct sk_buff *skb, struct device *dev)
+{
+  	struct tulip_private *tp = (struct tulip_private *)dev->priv;
+  	int entry;
+  	u32 flag;
+
+	if (test_and_set_bit(0, (void*)&dev->tbusy) != 0) {
+		/* printk("tulip_tx_queue: reject because tbusy\n"); */
+		return 1;
+	}
+
+	/* Caution: the write order is important here, set the base address
+	 * with the "ownership" bits last. */
+
+  	/* Calculate the next Tx descriptor entry. */
+  	entry = tp->cur_tx % TX_RING_SIZE;
+ 
+  	tp->tx_skbuff[entry] = skb;
+  	tp->tx_ring[entry].buffer1 = virt_to_le32desc(skb->data);
+	
+  	flag = 0x60000000; /* No interrupt */
+
+  	if (tp->cur_tx - tp->dirty_tx < TX_RING_SIZE - 2) 
+	    tp->tx_full = 0;
+  	else 
+    	/* Leave room for set_rx_mode() to fill entries. */
+    	tp->tx_full = 1;
+  	
+	if (entry == TX_RING_SIZE-1) 
+	  	flag = 0xe0000000 | DESC_RING_WRAP;
+
+  	tp->tx_ring[entry].length = cpu_to_le32(skb->len | flag);
+	/* new linux memory barrier thingie */
+	wmb();
+  	/* Pass ownership to the chip. */
+  	tp->tx_ring[entry].status = cpu_to_le32(DescOwned);
+  	tp->cur_tx++;
+
+#ifndef DEMAND_POLLTX
+  	outl(0, dev->base_addr + CSR1); 
+  	dev->trans_start = jiffies; 
+#endif
+	if (!tp->tx_full) 
+	    clear_bit(0, (void*)&dev->tbusy);
+
+  	return 0;
+}
+
+/* clean up tx dma ring */
+static int
+tulip_tx_clean(struct device *dev)
+{ 
+  	struct tulip_private *tp; 
+  	unsigned int dirty_tx; 
+	int ret;
+  	tp = (struct tulip_private *)dev->priv; 
+	
+  	for (dirty_tx = tp->dirty_tx; tp->cur_tx - dirty_tx > 0; dirty_tx++) {
+	    	int entry = dirty_tx % TX_RING_SIZE; 
+	    	int status = le32_to_cpu(tp->tx_ring[entry].status);
+    
+	    	if (status < 0) break; /* It still hasn't been Txed */ 
+    
+    		/* Check for Rx filter setup frames. */ 
+	    	if (tp->tx_skbuff[entry] == NULL) continue;
+
+	    	if (status & 0x8000) { 
+      			/* There was an major error, log it. */
+	      		tp->stats.tx_errors++; 
+      			if (status & 0x4104) tp->stats.tx_aborted_errors++; 
+      			if (status & 0x0C00) tp->stats.tx_carrier_errors++; 
+	      		if (status & 0x0200) tp->stats.tx_window_errors++;
+      			if (status & 0x0002) tp->stats.tx_fifo_errors++;
+      			if ((status & 0x0080) && tp->full_duplex == 0) 
+				tp->stats.tx_heartbeat_errors++;
+	    	} else {
+      			tp->stats.tx_bytes += tp->tx_ring[entry].length & 0x7ff; 
+      			tp->stats.collisions += (status >> 3) & 15; 
+	      		tp->stats.tx_packets++;
+    		}
+
+			tulip_recycle_or_free_skb(tp->tx_skbuff[entry]);
+	      	tp->tx_skbuff[entry] = 0; 
+  	}
+
+  	if (tp->tx_full && dev->tbusy && tp->cur_tx-dirty_tx < TX_RING_SIZE-2) { 
+		    /* The ring is no longer full, clear tbusy. */ 
+	        tp->tx_full = 0; 
+            clear_bit(0, (void*)&dev->tbusy);
+  	}
+
+  	tp->dirty_tx = dirty_tx; 
+	ret = tp->cur_tx - tp->dirty_tx;
+	
+  	return ret;
+}
+
+/* reuse skbs */
+static int
+tulip_reuse_skbs(struct sk_buff *skb, struct device *dev)
+{
+	while (skb) {
+		struct sk_buff *b = skb;
+		skb = skb->next;
+		b->next = b->prev = 0L;
+		tulip_recycle_or_free_skb(b);
+	}
+	return 0;
+}
+

Index: drivers/net/acenic.c
--- drivers/net/acenic.c.orig	Wed Jun  7 17:26:43 2000
+++ drivers/net/acenic.c	Sat Oct 28 16:50:24 2000
@@ -396,6 +396,68 @@
 
 static int probed __initdata = 0;
 
+/* Click - polling extension */
+static int ace_tx_queue(struct sk_buff *skb, struct device *dev);
+static int ace_tx_start(struct device *dev);
+static int ace_rx_refill(struct device *dev);
+static int ace_tx_clean(struct device *dev);
+static struct sk_buff *ace_rx_poll(struct device *dev, int *want);
+static int ace_poll_on(struct device *dev);
+static int ace_poll_off(struct device *dev);
+
+/* 
+ * only recycle normal size pkts... no jumbo frames.
+ * set to 0 if don't want to do recycle.
+ */
+#define SKB_RECYCLED	256
+
+unsigned acenic_recycled_skb_size = 0;
+static int acenic_recycled_skb_cnt = 0;
+static unsigned long acenic_recycle_skb_lock = 0;
+static struct sk_buff *acenic_recycled_skbs[SKB_RECYCLED];
+
+/* WARNING: these functions are not reentrant! */
+static inline struct sk_buff*
+acenic_get_recycled_skb(void)
+{
+  	struct sk_buff* skb = 0;
+  	if (acenic_recycled_skb_cnt > 0) {
+	  	while (test_and_set_bit(0, (void*)&acenic_recycle_skb_lock)) {
+			while(acenic_recycle_skb_lock) 
+			  	asm volatile("" ::: "memory");
+		}
+      	if (acenic_recycled_skb_cnt > 0) {
+       		acenic_recycled_skb_cnt--;
+       		skb = acenic_recycled_skbs[acenic_recycled_skb_cnt];
+      	}
+		clear_bit(0, (void*)&acenic_recycle_skb_lock);
+	}
+	return skb;
+}
+
+/* tries to recycle an skb. if not successful, the skb passed in is freed */
+static inline void
+acenic_recycle_or_free_skb(struct sk_buff *skb)
+{
+   	if (skb->truesize == acenic_recycled_skb_size) {
+   		if (acenic_recycled_skb_cnt < SKB_RECYCLED) {
+	  		while (test_and_set_bit(0, (void*)&acenic_recycle_skb_lock)) {
+		  		while(acenic_recycle_skb_lock) 
+			  		asm volatile("" ::: "memory");
+			}
+   			if (acenic_recycled_skb_cnt < SKB_RECYCLED) {
+      			if (skb_recycle(skb)) {
+					acenic_recycled_skbs[acenic_recycled_skb_cnt] = skb;
+					acenic_recycled_skb_cnt++;
+      			}
+				skb = 0;
+			}
+			clear_bit(0, (void*)&acenic_recycle_skb_lock);
+    	}
+	}
+	if (skb != 0) dev_kfree_skb(skb);
+}
+
 
 #ifdef NEW_NETINIT
 int __init acenic_probe (void)
@@ -468,6 +530,16 @@
 		dev->set_mac_address = &ace_set_mac_addr;
 		dev->change_mtu = &ace_change_mtu;
 
+		/* Click - polling extensions */
+		dev->polling = 0;
+		dev->rx_poll = ace_rx_poll;
+		dev->rx_refill = ace_rx_refill;
+		dev->tx_clean = ace_tx_clean;
+		dev->tx_queue = ace_tx_queue;
+		dev->tx_start = ace_tx_start;
+		dev->poll_off = ace_poll_off;
+		dev->poll_on = ace_poll_on;
+
 		/* display version info if adapter is found */
 		if (!version_disp)
 		{
@@ -1567,6 +1639,7 @@
 {
 	struct ace_regs *regs;
 	short i, idx;
+	extern unsigned acenic_recycled_skb_size;
 
 	regs = ap->regs;
 
@@ -1577,9 +1650,14 @@
 		struct rx_desc *rd;
 		dma_addr_t mapping;
 
-		skb = alloc_skb(ACE_STD_BUFSIZE, GFP_ATOMIC);
+		if (acenic_recycled_skb_size == 0 ||
+			(skb = acenic_get_recycled_skb()) == 0L)
+		 	skb = alloc_skb(ACE_STD_BUFSIZE, GFP_ATOMIC);
 		if (!skb)
 			break;
+		/* Click: save the size of the skb we need for the std rx ring. */
+		if (acenic_recycled_skb_size == 0)
+		  acenic_recycled_skb_size = skb->truesize;
 
 		/*
 		 * Make sure IP header starts on a fresh cache line.
@@ -1837,16 +1915,10 @@
 	return evtcsm;
 }
 
-
-static void ace_rx_int(struct net_device *dev, u32 rxretprd, u32 rxretcsm)
+static struct sk_buff*
+ace_rx_get_skb(struct net_device *dev, u32 idx, int *mini_count, int *std_count)
 {
-	struct ace_private *ap = dev->priv;
-	u32 idx;
-	int mini_count = 0, std_count = 0;
-
-	idx = rxretcsm;
-
-	while (idx != rxretprd) {
+		struct ace_private *ap = dev->priv;
 		struct ring_info *rip;
 		struct sk_buff *skb;
 		struct rx_desc *rxdesc, *retdesc;
@@ -1870,7 +1942,7 @@
 			rip = &ap->skb->rx_std_skbuff[skbidx];
 			mapsize = ACE_STD_BUFSIZE - (2 + 16);
 			rxdesc = &ap->rx_std_ring[skbidx];
-			std_count++;
+			(*std_count)++;
 			break;
 		case BD_FLG_JUMBO:
 			rip = &ap->skb->rx_jumbo_skbuff[skbidx];
@@ -1882,13 +1954,13 @@
 			rip = &ap->skb->rx_mini_skbuff[skbidx];
 			mapsize = ACE_MINI_BUFSIZE - (2 + 16);
 			rxdesc = &ap->rx_mini_ring[skbidx];
-			mini_count++; 
+			(*mini_count)++; 
 			break;
 		default:
 			printk(KERN_INFO "%s: unknown frame type (0x%02x) "
 			       "returned by NIC\n", dev->name,
 			       retdesc->flags);
-			goto error;
+			return 0L;
 		}
 
 		skb = rip->skb;
@@ -1920,11 +1992,29 @@
 		else
 			skb->ip_summed = CHECKSUM_NONE;
 
-		netif_rx(skb);		/* send it up */
-
 		ap->stats.rx_packets++;
 		ap->stats.rx_bytes += retdesc->size;
 
+		return skb;
+}
+
+
+static void ace_rx_int(struct net_device *dev, u32 rxretprd, u32 rxretcsm)
+{
+	struct ace_private *ap = dev->priv;
+	u32 idx;
+	int mini_count = 0, std_count = 0;
+
+	idx = rxretcsm;
+
+	while (idx != rxretprd) {
+		struct sk_buff *skb;
+
+		skb = ace_rx_get_skb(dev, idx, &mini_count, &std_count);
+		if (skb == 0L) goto error;
+
+		netif_rx(skb);		/* send it up */
+
 		idx = (idx + 1) % RX_RETURN_RING_ENTRIES;
 	}
 
@@ -1949,6 +2039,58 @@
 	goto out;
 }
 
+static void ace_service_tx(struct net_device *dev, int polling_ext)
+{
+	struct ace_private *ap;
+	struct ace_regs *regs;
+	u32 txcsm, idx;
+	
+	ap = dev->priv; 
+	regs = ap->regs;
+	
+	txcsm = *ap->tx_csm; 
+	idx = ap->tx_ret_csm;
+
+	do {
+		struct sk_buff *skb;
+
+		skb = ap->skb->tx_skbuff[idx].skb;
+		if (skb) {
+			dma_addr_t mapping;
+
+			mapping = ap->skb->tx_skbuff[idx].mapping;
+
+			ap->stats.tx_packets++;
+			ap->stats.tx_bytes += skb->len;
+			pci_unmap_single(ap->pdev, mapping, skb->len,
+					 PCI_DMA_TODEVICE);
+			if (!polling_ext) {
+				dev_kfree_skb_irq(skb);
+			} else {
+				acenic_recycle_or_free_skb(skb);
+			}
+
+			ap->skb->tx_skbuff[idx].skb = NULL;
+		}
+
+		/*
+		 * Question here is whether one should not skip
+		 * these writes - I have never seen any errors
+		 * caused by the NIC actually trying to access
+		 * these incorrectly.
+		 */
+#if (BITS_PER_LONG == 64)
+		writel(0, &ap->tx_ring[idx].addr.addrhi);
+#endif
+		writel(0, &ap->tx_ring[idx].addr.addrlo);
+		writel(0, &ap->tx_ring[idx].flagsize);
+
+		idx = (idx + 1) % TX_RING_ENTRIES;
+	} while (idx != txcsm);
+}
+
+static unsigned long ace_poll_intr = 0;
+static unsigned long ace_poll_evtintr = 0;
 
 static void ace_interrupt(int irq, void *dev_id, struct pt_regs *ptregs)
 {
@@ -1970,6 +2112,9 @@
 	if (!(readl(&regs->HostCtrl) & IN_INT))
 		return;
 
+	if (dev->polling)
+	  	ace_poll_intr++;
+
 	/*
 	 * Tell the card not to generate interrupts while we are in here.
 	 */
@@ -1985,45 +2130,14 @@
 	rxretprd = *ap->rx_ret_prd;
 	rxretcsm = ap->cur_rx;
 
-	if (rxretprd != rxretcsm)
+	if (rxretprd != rxretcsm && !dev->polling)
 		ace_rx_int(dev, rxretprd, rxretcsm);
 
 	txcsm = *ap->tx_csm;
 	idx = ap->tx_ret_csm;
 
-	if (txcsm != idx) {
-		do {
-			struct sk_buff *skb;
-
-			skb = ap->skb->tx_skbuff[idx].skb;
-			if (skb) {
-				dma_addr_t mapping;
-
-				mapping = ap->skb->tx_skbuff[idx].mapping;
-
-				ap->stats.tx_packets++;
-				ap->stats.tx_bytes += skb->len;
-				pci_unmap_single(ap->pdev, mapping, skb->len,
-						 PCI_DMA_TODEVICE);
-				dev_kfree_skb_irq(skb);
-
-				ap->skb->tx_skbuff[idx].skb = NULL;
-			}
-
-			/*
-			 * Question here is whether one should not skip
-			 * these writes - I have never seen any errors
-			 * caused by the NIC actually trying to access
-			 * these incorrectly.
-			 */
-#if (BITS_PER_LONG == 64)
-			writel(0, &ap->tx_ring[idx].addr.addrhi);
-#endif
-			writel(0, &ap->tx_ring[idx].addr.addrlo);
-			writel(0, &ap->tx_ring[idx].flagsize);
-
-			idx = (idx + 1) % TX_RING_ENTRIES;
-		} while (idx != txcsm);
+	if (txcsm != idx && !dev->polling) {
+		ace_service_tx(dev, 0);
 
 		/*
 		 * Once we actually get to this point the tx ring has
@@ -2054,6 +2168,8 @@
 	evtprd = *ap->evt_prd;
 
 	if (evtcsm != evtprd) {
+	    if (dev->polling)
+			ace_poll_evtintr++;
 		evtcsm = ace_handle_event(dev, evtcsm, evtprd);
 		writel(evtcsm, &regs->EvtCsm);
 	}
@@ -2062,7 +2178,7 @@
 	 * This has to go last in the interrupt handler and run with
 	 * the spin lock released ... what lock?
 	 */
-	if (netif_running(dev)) {
+	if (!dev->polling && netif_running(dev)) {
 		int cur_size;
 		int run_bh = 0;
 
@@ -2266,14 +2382,43 @@
 	return 0;
 }
 
-
-static int ace_start_xmit(struct sk_buff *skb, struct net_device *dev)
+static int ace_queue_skb(struct sk_buff *skb, struct net_device *dev, u32 idx)
 {
 	struct ace_private *ap = dev->priv;
 	struct ace_regs *regs = ap->regs;
 	unsigned long addr;
-	u32 idx, flagsize;
+	u32 flagsize;
+	
+	ap->skb->tx_skbuff[idx].skb = skb;
+	ap->skb->tx_skbuff[idx].mapping =
+		pci_map_single(ap->pdev, skb->data, skb->len,
+			       PCI_DMA_TODEVICE);
+	addr = (unsigned long) ap->skb->tx_skbuff[idx].mapping;
+#if (BITS_PER_LONG == 64)
+	writel(addr >> 32, &ap->tx_ring[idx].addr.addrhi);
+#endif
+	writel(addr & 0xffffffff, &ap->tx_ring[idx].addr.addrlo);
+	flagsize = (skb->len << 16) | (BD_FLG_END) ;
+	writel(flagsize, &ap->tx_ring[idx].flagsize);
+	wmb();
+	idx = (idx + 1) % TX_RING_ENTRIES;
+
+	ap->tx_prd = idx;
+	ace_set_txprd(regs, ap, idx);
+	return idx;
+}
 
+static int ace_start_xmit(struct sk_buff *skb, struct net_device *dev)
+{
+	struct ace_private *ap = dev->priv;
+	u32 idx;
+
+	/* polling extension: we have to use tbusy to prevent ace_start_xmit from
+	 * colliding with ace_tx_queue */
+#if 1
+	if (test_and_set_bit(0, &dev->tbusy))
+		return 1;
+#else
 	/*
 	 * ARGH, there is just no pretty way to do this
 	 */
@@ -2283,6 +2428,7 @@
 #else
 	netif_stop_queue(dev);
 #endif
+#endif
 
 	idx = ap->tx_prd;
 
@@ -2295,22 +2441,7 @@
 		return 1;
 	}
 
-	ap->skb->tx_skbuff[idx].skb = skb;
-	ap->skb->tx_skbuff[idx].mapping =
-		pci_map_single(ap->pdev, skb->data, skb->len,
-			       PCI_DMA_TODEVICE);
-	addr = (unsigned long) ap->skb->tx_skbuff[idx].mapping;
-#if (BITS_PER_LONG == 64)
-	writel(addr >> 32, &ap->tx_ring[idx].addr.addrhi);
-#endif
-	writel(addr & 0xffffffff, &ap->tx_ring[idx].addr.addrlo);
-	flagsize = (skb->len << 16) | (BD_FLG_END) ;
-	writel(flagsize, &ap->tx_ring[idx].flagsize);
-	wmb();
-	idx = (idx + 1) % TX_RING_ENTRIES;
-
-	ap->tx_prd = idx;
-	ace_set_txprd(regs, ap, idx);
+	idx = ace_queue_skb(skb, dev, idx);
 
 	/*
 	 * tx_csm is set by the NIC whereas we set tx_ret_csm which
@@ -2966,9 +3097,262 @@
 	goto out;
 }
 
-
+
 /*
  * Local variables:
  * compile-command: "gcc -D__SMP__ -D__KERNEL__ -DMODULE -I../../include -Wall -Wstrict-prototypes -O2 -fomit-frame-pointer -pipe -fno-strength-reduce -DMODVERSIONS -include ../../include/linux/modversions.h   -c -o acenic.o acenic.c"
  * End:
  */
+
+
+/*
+ * Polling Extension
+ *
+ * tx_csm: NIC's tx consumer pointer. updated when NIC transmit a pkt.
+ *
+ * tx_ret_csm: driver's tx consumer pointer. the pkts between tx_ret_csm and
+ * tx_csm are transmitted packets that need to be cleaned up. 
+ * 
+ * TxPrd: tx producer register in shared memory, read by NIC. this is kept in
+ * sync with tx_prd.
+ *
+ * tx_prd: driver's tx producer pointer (i.e. the next free buf on tx ring).
+ * driver will queue pkts onto tx ring, starting from tx_prd until the idx on
+ * tx ring hits tx_ret_csm - 2. that is when the driver believes the tx ring
+ * is full.
+ *
+ * rx_ret_prd: NIC's rx producer pointer. when a pkt arrives at NIC, this
+ * producer is incremented.
+ *
+ * cur_rx: the next rx buffer the driver should read. the difference between
+ * cur_rx and rx_ret_prd are newly arrived pkts.
+ *
+ * rx processing with Tigon uses a return ring. there are three rx rings (std,
+ * mini, and jumbo) and one rx return ring. the rx_ret_prd pointer points to
+ * the return ring. on the return ring, a descriptor tells you which of the
+ * three rx rings contain the last pkt. there is a counter for each of the
+ * three rings. when a pkt is pulled off of a ring, the corresponding counter
+ * is incremented. this is important, because the number recorded by each
+ * counter is the number of buffer refilled onto each ring.
+ */
+
+// #define SELECTIVE_INTR 1
+
+static int 
+ace_tx_queue(struct sk_buff *skb, struct device *dev)
+{
+	struct ace_private *ap = dev->priv;
+	u32 idx;
+     
+	/* polling extension: we have to use tbusy to prevent ace_start_xmit from
+	 * colliding with ace_tx_queue */
+	if (test_and_set_bit(0, (void*)&dev->tbusy))
+		return 1;
+
+	idx = ap->tx_prd;
+
+	/* hard_start_xmit and tx_clean collision detected */
+	if ((idx + 1) % TX_RING_ENTRIES == ap->tx_ret_csm) {
+		ap->tx_full = 1;
+		return 1;
+	}
+	
+	idx = ace_queue_skb(skb, dev, idx);
+
+	if ((idx + 2) % TX_RING_ENTRIES == ap->tx_ret_csm) {
+		ap->tx_full = 1;
+	} else {
+		clear_bit(0, (void*)&dev->tbusy);
+	}
+
+	dev->trans_start = jiffies;
+	return 0;
+}
+
+static int 
+ace_tx_start(struct device *dev)
+{
+	/* sorry pal, dunno how to do this... */
+	return 1;
+}
+
+static int 
+ace_tx_clean(struct device *dev)
+{
+	struct ace_private *ap = dev->priv;
+	u32 txcsm = *ap->tx_csm; 
+
+	if (txcsm != ap->tx_ret_csm) {
+	  	ace_service_tx(dev, 1);
+
+		/* only clear the tbusy bit if tx_full is set, so we don't
+		 * accidentally allow two start_xmit or tx_queue to go on w/o
+		 * synchronization. if tx_full is set, then neither start_xmit nor
+		 * tx_queue is executing, or one is executing but the producer pointer
+		 * has already been updated. 
+		 */
+		if (ap->tx_full) {
+			clear_bit(0, (void*)&ap->tx_full);
+			clear_bit(0, (void*)&dev->tbusy);
+		}
+		ap->tx_ret_csm = txcsm;
+		wmb();
+	}
+	if (ap->tx_prd < ap->tx_ret_csm) 
+	  return ap->tx_prd + TX_RING_ENTRIES - ap->tx_ret_csm;
+	else 
+	  return ap->tx_prd - ap->tx_ret_csm;
+}
+
+static int 
+ace_rx_refill(struct device *dev)
+{
+    u32 evtcsm, evtprd;
+	struct ace_private *ap = dev->priv;
+	struct ace_regs *regs = ap->regs;
+
+	/* this seems like what we wanted: while it does clear the bh_pending bit
+	 * for ace, but bh_pending is only set when rx rings need to be filled, so
+	 * we should be fine.
+	 *
+	 * ace_bh return type is void, so we always return 0, even if ace_bh says
+	 * there are no more memory to refill the rings... I guess that is really
+	 * a fatalistic condition anyways...
+	 */ 
+	ace_bh(dev);
+  
+#ifndef SELECTIVE_INTR
+	/* handle events... since we can't selectively mask out rx and tx
+	 * interrupts...
+	 */
+	evtcsm = readl(&regs->EvtCsm);
+    evtprd = *ap->evt_prd;
+
+    if (evtcsm != evtprd) {
+        evtcsm = ace_handle_event(dev, evtcsm, evtprd);
+        writel(evtcsm, &regs->EvtCsm);
+    }
+#endif	
+	return 0;
+}
+
+static struct sk_buff *
+ace_rx_poll(struct device *dev, int *want)
+{
+	struct ace_private *ap = dev->priv;
+	u32 idx, rxretprd;
+	int mini_count = 0, std_count = 0;
+	struct sk_buff *skb_head, *skb_last;
+	int got = 0;
+
+	skb_head = skb_last = NULL;
+
+	rxretprd = *ap->rx_ret_prd;
+	idx = ap->cur_rx;
+
+	while (idx != rxretprd && got < *want) {
+		struct sk_buff *skb;
+
+		skb = ace_rx_get_skb(dev, idx, &mini_count, &std_count);
+		if (skb == 0L) goto error;
+
+		if (got == 0) {
+			skb_head = skb;
+			skb_last = skb;
+			skb_last->next = NULL;
+			skb_last->prev = NULL;
+		} else {
+			skb_last->next = skb;
+			skb->prev = skb_last;
+			skb->next = NULL;
+			skb_last = skb;
+		}
+		got++;
+
+		idx = (idx + 1) % RX_RETURN_RING_ENTRIES;
+	}
+
+	atomic_sub(std_count, &ap->cur_rx_bufs);
+	if (!ACE_IS_TIGON_I(ap))
+		atomic_sub(mini_count, &ap->cur_mini_bufs);
+
+ out:
+	/*
+	 * According to the documentation RxRetCsm is obsolete with
+	 * the 12.3.x Firmware - my Tigon I NICs seem to disagree!
+	 */
+	if (ACE_IS_TIGON_I(ap)) {
+		struct ace_regs *regs = ap->regs;
+		writel(idx, &regs->RxRetCsm);
+	}
+	ap->cur_rx = idx;
+
+	*want = got;
+	return skb_head;
+
+ error:
+	idx = rxretprd;
+	goto out;
+}
+
+static int 
+ace_poll_on(struct device *dev)
+{
+    if (!dev->polling) {
+    	struct ace_private *ap;
+		struct ace_regs *regs;
+		struct net_device *d = (struct net_device*)dev;
+		u32 stat;
+
+		ap = d->priv;
+		regs = ap->regs;
+
+#ifdef SELECTIVE_INTR
+		/* okay, for some reason, below code segment did not turn off rx and
+		 * tx interrupts... so we need to mask interrupts completely and
+		 * depend on rx_refill to manage events.
+		 */
+		stat = readl(&regs->ModeStat);
+		stat |= (ACE_DONT_RUPT_SENDS | ACE_DONT_RUPT_RECVS);
+		writel(stat, &regs->ModeStat);
+#else	
+		stat = readl(&regs->HostCtrl);
+		stat |= MASK_INTS;
+		writel(stat, &regs->HostCtrl);
+#endif
+		dev->polling = 1;
+	}
+	return 0;
+}
+
+static int 
+ace_poll_off(struct device *dev)
+{
+    if (dev->polling) {
+		struct ace_private *ap;
+		struct ace_regs *regs;
+		struct net_device *d = (struct net_device*)dev;
+		u32 stat;
+
+		ap = d->priv;
+		regs = ap->regs;
+
+#ifdef SELECTIVE_INTR
+		stat = readl(&regs->ModeStat); 
+		stat &= ~(ACE_DONT_RUPT_SENDS | ACE_DONT_RUPT_RECVS); 
+		writel(stat, &regs->ModeStat);
+#else		
+		stat = readl(&regs->HostCtrl);
+		stat &= ~MASK_INTS;
+		writel(stat, &regs->HostCtrl);
+#endif
+		dev->polling = 0;
+
+		printk("ace polling interrupt summary: %ld %ld\n", 
+			   ace_poll_intr, ace_poll_evtintr); 
+		ace_poll_intr = ace_poll_evtintr = 0;
+	}
+	return 0;
+}
+
+

Index: drivers/net/acenic.h
--- drivers/net/acenic.h.orig	Wed Jun  7 17:26:43 2000
+++ drivers/net/acenic.h	Sat Oct 28 16:50:24 2000
@@ -251,6 +251,9 @@
 #define ACE_WARN		0x08
 #define ACE_BYTE_SWAP_DMA	0x10
 #define ACE_NO_JUMBO_FRAG	0x200
+#define ACE_DONT_RUPT_EVENTS	0x1000
+#define ACE_DONT_RUPT_SENDS	0x2000
+#define ACE_DONT_RUPT_RECVS	0x4000
 #define ACE_FATAL		0x40000000
 
 
