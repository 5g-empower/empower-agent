CLICK INSTALLATION INSTRUCTIONS
===============================

To compile any version of Click, you will need the GNU C compiler; the GNU
C++ compiler (version 2.8 or above, or a recent version of egcs); and GNU
Make. The `./configure' script should complain if it cannot find software
it needs.

The user-level version of Click should compile and run on any Intel x86
Unix system that has the pcap library. (The pcap library is necessary to
communicate with the network. See the end of this document for portability
notes for other architectures.) The Linux kernel module requires a patched
Linux 2.2 system; we've tested on the recent 2.2.14 Linux kernel.

First, run

	./configure [--prefix=PREFIX]

This will test your system and decide the versions that will work for you
(user-level, Linux module, or both). It will tell you what is wrong if it
cannot compile a version. Run

	./configure --help

to see more options for `./configure'.

After running `./configure', the `make install' command will install the
user-level executable `click', the kernel module `click.o', the
configuration optimizer `click-xform', and manual pages for the Click
language, the kernel module, and many of the element classes, all under
PREFIX (which defaults to /usr/local).

USERLEVEL
---------

Build the user-level Click program in the `userlevel' directory:

	cd CLICKDIR/userlevel
	gmake

This will eventually create an executable named `click'. Test it by
passing it the file name of a Click-language router description
(see doc/click.5); for example,

	./click ../conf/test.ipb

The `conf' directory in this distribution has a few sample configuration
files.

The configure script may not be able to find your pcap library if it's in a
nonstandard place. To fix this, set your `PCAP_HEADER_PATH' and
`PCAP_LIBRARY_PATH' environment variables and rerun `./configure'. The
`PCAP_HEADER_PATH' variable contains options that tell the C preprocessor
where to find `pcap.h'; the `PCAP_LIBRARY_PATH' variable contains options
that tell the linker where to find `libpcap.a'. One example setting would
be `PCAP_HEADER_PATH=-I/usr/local/include/pcap' and
`PCAP_LIBRARY_PATH=-L/usr/local/lib/pcap'.

LINUX MODULE
------------

Before you can compile or use the Click loadable kernel module, you need to
install, patch, compile, and boot a compatible Linux kernel. These
instructions assume you have at least passing familiarity with compiling
and running Linux kernels.

 1. Archive a complete, working Linux kernel and any corresponding modules.
    This is in case something goes wrong and you need to revert to an old
    kernel.

 2. Get a copy of the Linux 2.2.14 kernel source distribution, for example
    from www.kernel.org. A later 2.2 kernel may also work. Unpack this
    distribution into /usr/src/linux. (Save the old kernel source tree, if
    you had one.)

 3. Install the Click Linux kernel patch:

	cd /usr/src/linux
	patch -p0 -b < CLICKDIR/etc/linux-2.2.14-patch

    The patch fixes syntax errors in several header files (the C++ compiler
    doesn't accept them), adds several new functions, and changes the
    `struct device' kernel data structure. Therefore, if you compiled your
    old kernel without module versioning, you WILL need to recompile
    modules.

 4. Configure the new kernel. The Click patch does not add any
    configuration options, so you can start from your old 2.2
    configuration, or you can do the usual `make menuconfig'.

 5. If your archived, working kernel has the same version number as the
    patched kernel (they're both 2.2.14, for example), then it is a good
    idea to change the patched kernel's `EXTRAVERSION'. This way, the
    modules for the new kernel won't overwrite the old, working modules.
    Edit /usr/src/linux/Makefile and change the line `EXTRAVERSION =' to
    `EXTRAVERSION = click', or whatever you would like.

 6. Compile and install the kernel:

	make dep
	make bzImage			(or zImage)
	(copy the bzImage file to the boot directory)
	make modules
	make modules_install

 7. Edit /etc/lilo.conf to tell it about the new kernel, then run
    /sbin/lilo.

 8. Reboot your machine with the new kernel.

Now you are ready to compile and install the Click module. Rerun
`./configure' to tell the system about your new kernel:

	rm -f config.cache ; ./configure

Then build the module:

	cd linuxmodule
	gmake

Eventually, this will create a module object file, `click.o'. Install this
module with

	/sbin/insmod click.o

At this point you can load a configuration file (see doc/click.5) with

        cat xxx.ipb > /proc/click/config

PORTABILITY
-----------

    To run a Click configuration on a non-x86 machine, you will need to
worry about alignment. By default, Click configurations assume that
unaligned accesses are OK (for instance, that it is OK to load a word from
an address that isn't start on a four-byte boundary). On most
architectures, however, unaligned accesses cause problems. To run Click on
such an architecture, you'll need to run your configurations through the
`click-align' tool before installing them. `Click-align' (see
doc/click-align.1) figures out what alignment is required and adds elements
as necessary to make that alignment happen. It also adds an `AlignmentInfo'
element to tell every element what kind of alignment it can expect.

    Note that some parts of the system have not yet been updated for
non-x86 portability. In particular, IP checksums appear to be computed
incorrectly on SPARCs, probably due to endian issues.
