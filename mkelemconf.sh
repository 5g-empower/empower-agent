#!/bin/sh

# mkelemconf.sh -- script takes list of elements and generates Makefile or
# C++ source code
# Eddie Kohler
#
# Copyright (c) 2000 Massachusetts Institute of Technology
# Copyright (c) 2000 Mazu Networks, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# Further elaboration of this license, including a DISCLAIMER OF ANY
# WARRANTY, EXPRESS OR IMPLIED, is provided in the LICENSE file, which is
# also accessible at http://www.pdos.lcs.mit.edu/click/license.html

# determine mode
makefile=1
package=""
expand=0
prefix=""
verbose=""
driver=""
date=`date`
while [ x"$1" != x ]; do
case $1 in
  -m|--m|--ma|--mak|--make|--makef|--makefi|--makefil|--makefile)
     makefile=1; package=""; shift 1;;
  -c|--c|--cx|--cxx)
     makefile=0; package=""; shift 1;;
  -k|--pa|--pac|--pack|--packa|--packag|--package)
     shift 1; package="$1"; makefile=0; shift 1;;
  -k*)
     package=`echo "$1" | sed 's/^-k//'`; makefile=0; shift 1;;
  --pa=*|--pac=*|--pack=*|--packa=*|--packag=*|--package=*)
     package=`echo "$1" | sed 's/^[^=]*=//'`; makefile=0; shift 1;;
  -p|--pr|--pre|--pref|--prefi|--prefix)
     shift 1; prefix="$1/"; shift 1;;
  -p*)
     prefix=`echo "$1" | sed 's/^-p//'`; shift 1;;
  --pr=*|--pre=*|--pref=*|--prefi=*|--prefix=*)
     prefix=`echo "$1" | sed 's/^[^=]*=//'`; shift 1;;
  -t|--t|--ta|--tar|--targ|--targe|--target)
     shift 1; driver="$1"; shift 1;;
  -t*)
     driver=`echo "$1" | sed 's/^-t//'`; shift 1;;
  --t=*|--ta=*|--tar=*|--targ=*|--targe=*|--target=*)
     driver=`echo "$1" | sed 's/^[^=]*=//'`; shift 1;;
  -V|--v|--ve|--ver|--verb|--verbo|--verbos|--verbose)
     verbose=1; shift 1;;
  -h|--h|--he|--hel|--help)
     cat <<'EOF' 1>&2
`Mkelemconf.sh' reads a list of Click element source code files on the standard
input, examines those files to find the elements, and writes a file designed
for those elements to the standard output. It can generate either a Makefile
fragment defining the ELEMENT_OBJS variable (-m), a C++ source file that adds
the elements to a Lexer (-c), or a C++ source file suitable for making an
elements package (-k).

Usage: mkelemconf.sh [-m|-c|-k PKGNAME] [-pPREFIX] [-V] < elements.conf

Options:
  -m, --makefile           Generate a Makefile fragment.
  -c, --cxx                Generate a C++ definition of `export_elements()'.
  -k, --package PKGNAME    Generate C++ suitable for a package named PKGNAME.
  -V, --verbose            Print more information.
  -p, --prefix PREFIX      Preprend PREFIX to every file.
  -t, --target TARG        Set target to TARG (either `kernel' or `user').
  -h, --help               Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
     exit 0;;
  *)
     echo "Usage: mkelemconf.sh [-m|-c|-k PKGNAME] [-pPREFIX] [-V] < elements.conf" 1>&2
     exit 1;;
esac
done

if test -n "$verbose" -a -n "$prefix"; then
  echo "Prefix: $verbose" 1>&2
fi

osuffix=".o"
makevar="ELEMENT_OBJS"
if test -n "$driver"; then
  if test "$driver" = 'kernel'; then
    osuffix=".ko"
    makevar="K_ELEMENT_OBJS"
  elif test "$driver" = 'user'; then
    osuffix=".uo"
    makevar="U_ELEMENT_OBJS"
  else
    echo "Unknown driver $driver" 1>&2
    exit 1
  fi
fi

# expand list of files
if test -n "$prefix"; then
  prefix=`echo "$prefix" | sed 's/\//\\\//'`
  files=`grep -v '^#' | sed 's/^/'"$prefix"'/'`
else
  files=`grep -v '^#'`
fi

# find a good version of awk
if test -x /usr/bin/gawk; then
  awk=gawk
elif test -x /usr/bin/nawk; then
  awk=nawk
else
  awk=awk
fi

# output files!
if test $makefile = 1; then
  echo '# Generated by "mkelemconf.sh" on' `date`
  echo "$makevar = \\"
  grep -l '^ELEMENT_PROVIDES\|^EXPORT_ELEMENT' $files | sed -e 's/\.cc*$/'"$osuffix"' \\/;s/^.*\///' | grep .
  echo
elif test -n "$package"; then
  # also search /dev/null so there are always at least two files
  grep '^EXPORT_ELEMENT' $files /dev/null | $awk -F: 'BEGIN {
  OFS = ""; nrebecca = 0; packname="'"$package"'";
}
{
  sub(/\.cc/, ".hh", $1);
  INCLUDES[$1] = 1;
  sub(/EXPORT_ELEMENT\(/, "", $2);
  sub(/\)/, "", $2);
  B = B "  CLICK_DMALLOC_REG(\"" $2 "\");\n  hatred_of_rebecca[" nrebecca "] = click_add_element_type(0, new " $2 ");\n  MOD_DEC_USE_COUNT;\n";
  C = C "  MOD_INC_USE_COUNT;\n  click_remove_element_type(hatred_of_rebecca[" nrebecca "]);\n";
  nrebecca++;
}
END {
  print "/* Generated by \"mkelemconf.sh\" on '"$date"' */";
  print "/* Package name: ", packname, " */\n";
  print "#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n#include <clickconfig.h>\n#include <clickpackage.hh>";
  for (file in INCLUDES) {
    print "#include \"", file, "\"";
  }
  print "static int hatred_of_rebecca[", nrebecca, "];";
  print "extern \"C\" int\ninit_module()\n{\n  click_provide(\"", packname, "\");";
  print B, "  CLICK_DMALLOC_REG(\"nXXX\");\n  return 0;\n}";
  print "extern \"C\" void\ncleanup_module()\n{\n", C, "  click_unprovide(\"", packname, "\");\n}";
}
'
else
  # also search /dev/null so there are always at least two files
  grep '^EXPORT_ELEMENT' $files /dev/null | $awk -F: 'BEGIN {
   OFS = "";
}
{
  sub(/\.cc/, ".hh", $1);
  INCLUDES[$1] = 1;
  sub(/EXPORT_ELEMENT\(/, "", $2);
  sub(/\)/, "", $2);
  B = B "  CLICK_DMALLOC_REG(\"" $2 "\");\n  lexer->add_element_type(new " $2 ");\n";
}
END {
  print "/* Generated by \"mkelemconf.sh\" on '"$date"' */\n";
  print "#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n#include \"lexer.hh\"";
  for (file in INCLUDES) {
    print "#include \"", file, "\"";
  }
  print "void\nexport_elements(Lexer *lexer)\n{";
  print B, "  CLICK_DMALLOC_REG(\"nXXX\");\n}";
}
'
fi
