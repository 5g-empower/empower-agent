#!/bin/sh

# click-buildtool -- build tools for Click
# Eddie Kohler
#
# Copyright (c) 2000 Massachusetts Institute of Technology
# Copyright (c) 2000 Mazu Networks, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# Further elaboration of this license, including a DISCLAIMER OF ANY
# WARRANTY, EXPRESS OR IMPLIED, is provided in the LICENSE file, which is
# also accessible at http://www.pdos.lcs.mit.edu/click/license.html

verbose=""
elem2=""

# find a good version of awk
if test -x /usr/bin/gawk; then
    awk=gawk
elif test -x /usr/bin/nawk; then
    awk=nawk
else
    awk=awk
fi



findelem_usage () {
    echo "Usage: click-buildtool findelem [-a] [-V] [-p PREFIX] < [FILES AND DIRECTORIES]
Try \`click-buildtool findelem --help' for more information." 1>&2
    exit 1
}

findelements () {
    prefix=""
    all=0
    provisions=""
    while [ x"$1" != x ]; do
    case $1 in
    -p|--pre|--pref|--prefi|--prefix)
	if test $# -lt 2; then findelem_usage; fi
	shift 1; prefix="$1/"; shift 1;;
    -p*)
	prefix=`echo "$1" | sed 's/^-p//'`/; shift 1;;
    --pre=*|--pref=*|--prefi=*|--prefix=*)
	prefix=`echo "$1" | sed 's/^[^=]*=//'`/; shift 1;;
    -V|--v|--ve|--ver|--verb|--verbo|--verbos|--verbose)
	verbose=1; shift 1;;
    -a|--a|--al|--all)
	all=1; shift 1;;
    -r|--pro|--prov|--provi|--provid|--provide)
	if test $# -lt 2; then findelem_usage; fi
	shift 1; provisions="$1
$provisions"; shift 1;;
    -r*)
	provisions=`echo "$1" | sed 's/^-r//'`"
$provisions"; shift 1;;
    --pro=*|--prov=*|--provi=*|--provid=*|--provide=*)
	provisions=`echo "$1" | sed 's/^[^=]*=//'`"
$provisions"; shift 1;;
    -h|--h|--he|--hel|--help)
	cat <<'EOF' 1>&2
`Click-buildtool findelem' locates valid Click element source code. It starts
with a collection of source code, then eliminates files whose requirements
are not available until reaching a stable set of sources. It expects a list of
files and directories on standard input. Directories are searched for .cc
source files; any files found are considered. The initial list of available
requirements is the list of directories given on the standard input, plus the
list of EXPORT_ELEMENT() and ELEMENT_PROVIDES() keywords, plus any extra
requirements specified with `-r'.

Usage: click-buildtool findelem [-a] [-V] [-p PREFIX] < [FILES AND DIRECTORIES]

Options:
  -a, --all                Include all subdirectories of `elements' rather
                           than reading standard input.
  -V, --verbose            Print more information about dependency checking.
  -p, --prefix PREFIX      Preprend PREFIX to every file and/or directory.
  -r, --provide REQ        Mark the requirement REQ as initially available.
  -h, --help               Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
	exit 0;;
    *)
	findelem_usage;;
    esac
    done

    if test -n "$verbose" -a -n "$prefix"; then
	echo "Prefix: $verbose" 1>&2
    fi

    # expand list of files
    if test $all = 1; then
	first_files=`cd ${prefix}elements; ls`
    else
	first_files=`cat`
    fi

    files=""
    for i in $first_files; do
	pprefix="$prefix"
	if test -d "${prefix}elements/$i" && echo "$i" | grep -v '^\.' >/dev/null; then
	    pprefix="${prefix}elements/"
	fi
	if test -d "${pprefix}$i"; then
	    provisions=`echo $i | sed 's/^\.\///'`"
$provisions"
	    files="$files
"`find ${pprefix}$i -follow \( -name \*.cc -o -name \*.c \) -print | grep -v '/[.,][^/]*$'`
	else
	    files="$files
$i"
	fi
    done
    files=`echo "$files" | sort | uniq | grep .`

    # die if no files
    if test -z "$files"; then
	echo "no files found" 1>&2
	exit 1
    fi

    # check dependencies: generate a list of bad files, then remove those files
    # from the list of good files
    bad_files=''
    while true; do
	exports1=`grep '^EXPORT_ELEMENT' $files | sed 's/.*(\(.*\)).*/\1/'`
	exports2=`grep '^ELEMENT_PROVIDES' $files | sed 's/.*(\(.*\)).*/\1/'`
	awk_exports=`echo "$exports1"'
'"$exports2"'
'"$provisions" | sed 's/\(..*\)/dep["\1"]=1;/'`
	new_bad_files=`grep '^ELEMENT_REQUIRES' $files | $awk -F: 'BEGIN {OFS="";'"$awk_exports"'dep["true"]=1; dep["1"]=1;
}
{
  sub(/ELEMENT_REQUIRES\(/, "", $2);
  sub(/\)/, "", $2);
  split($2, deps, / +/);
  for (j in deps) {
    i = deps[j]
    if (!dep[i]) {
      print $1;
      break;
    }
  }
}' | sort | uniq`
	if test -n "$verbose"; then
	    echo
	    echo "Files: $files" 1>&2
	    echo
	    echo "Bad files: $bad_files" 1>&2
	fi
	if test -z "$new_bad_files"; then
	    break
	else
	    files=`echo "$files
$new_bad_files" | sort | uniq -u`
	    bad_files="$new_bad_files
$bad_files"
	fi
    done

    # output files
    echo "# Generated by 'click-buildtool findelem' on" `date`
    echo "$files"
}




elem2xxx_usage () {
    echo -n "Usage: click-buildtool elem2$elem2 [-p PREFIX] [-V]" 1>&2
    if test "$elem2" = package; then echo -n " PKGNAME" 1>&2; fi
    echo " < elements.conf
Try \`click-buildtool elem2$elem2 --help' for more information." 1>&2
    exit 1
}


elem2make () {
    prefix=""
    driver=""
    date=`date`
    while [ x"$1" != x ]; do
    case $1 in
    -p|--pr|--pre|--pref|--prefi|--prefix)
	if test $# -lt 2; then elem2xxx_usage; fi
	shift 1; prefix="$1/"; shift 1;;
    -p*)
	prefix=`echo "$1" | sed 's/^-p//'`; shift 1;;
    --pr=*|--pre=*|--pref=*|--prefi=*|--prefix=*)
	prefix=`echo "$1" | sed 's/^[^=]*=//'`; shift 1;;
    -t|--t|--ta|--tar|--targ|--targe|--target)
	if test $# -lt 2; then elem2xxx_usage; fi
	shift 1; driver="$1"; shift 1;;
    -t*)
	driver=`echo "$1" | sed 's/^-t//'`; shift 1;;
    --t=*|--ta=*|--tar=*|--targ=*|--targe=*|--target=*)
	driver=`echo "$1" | sed 's/^[^=]*=//'`; shift 1;;
    -V|--v|--ve|--ver|--verb|--verbo|--verbos|--verbose)
	verbose=1; shift 1;;
    -h|--h|--he|--hel|--help)
	cat <<'EOF' 1>&2
`Click-buildtool elem2make' reads a list of Click element source code files on
the standard input, examines those files to find the elements, and writes a
Makefile fragment defining the ELEMENT_OBJS variable to the standard output.

Usage: click-buildtool elem2make [-p PREFIX] [-t TARGET] [-V] < elements.conf

Options:
  -p, --prefix PREFIX      Preprend PREFIX to every file.
  -t, --target TARGET      Set target to TARGET (either `kernel' or `user').
  -V, --verbose            Print more information.
  -h, --help               Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
	exit 0;;
    *)
	elem2xxx_usage;;
    esac
    done

    if test -n "$verbose" -a -n "$prefix"; then
	echo "Prefix: $verbose" 1>&2
    fi

    osuffix=".o"
    makevar="ELEMENT_OBJS"
    if test -n "$driver"; then
	if test "$driver" = 'kernel'; then
	    osuffix=".ko"
	    makevar="K_ELEMENT_OBJS"
	elif test "$driver" = 'user'; then
	    osuffix=".uo"
	    makevar="U_ELEMENT_OBJS"
	else
	    echo "Unknown driver $driver" 1>&2
	    exit 1
	fi
    fi

    # expand list of files
    if test -n "$prefix"; then
	prefix=`echo "$prefix" | sed 's/\//\\\//'`
	files=`grep -v '^#' | sed 's/^/'"$prefix"'/'`
    else
	files=`grep -v '^#'`
    fi

    # output
    echo "# Generated by 'click-buildtool elem2make' on" `date`
    echo "$makevar = \\"
    grep -l '^ELEMENT_PROVIDES\|^EXPORT_ELEMENT' $files | sed -e 's/\.cc*$/'"$osuffix"' \\/;s/^.*\///' | grep .
    echo

}


elem2xxx () {
    package=""
    prefix=""
    date=`date`
    while [ x"$1" != x ]; do
    case $1 in
    -p|--pr|--pre|--pref|--prefi|--prefix)
	if test $# -lt 2; then elem2xxx_usage; fi
	shift 1; prefix="$1/"; shift 1;;
    -p*)
	prefix=`echo "$1" | sed 's/^-p//'`; shift 1;;
    --pr=*|--pre=*|--pref=*|--prefi=*|--prefix=*)
	prefix=`echo "$1" | sed 's/^[^=]*=//'`; shift 1;;
    -V|--v|--ve|--ver|--verb|--verbo|--verbos|--verbose)
	verbose=1; shift 1;;
    -h|--h|--he|--hel|--help)
	if test "$elem2" = export; then
	    cat <<'EOF' 1>&2
`Click-buildtool elem2export' reads a list of Click element source code files
on the standard input, examines those files to find the elements, and writes a
C++ source file defining the export_elements() function to the standard output.

Usage: click-buildtool elem2export [-p PREFIX] [-V] < elements.conf
EOF
	elif test "$elem2" = package; then
	    cat <<'EOF' 1>&2
`Click-buildtool elem2package' reads a list of Click element source code files
on the standard input, examines those files to find the elements, and writes a
C++ source file suitable for creating a dynamically linked package with those
elements to the standard output. PKGNAME is the name of the package.

Usage: click-buildtool elem2package [-p PREFIX] [-V] PKGNAME < elements.conf
EOF
	fi
	cat <<'EOF' 1>&2

Options:
  -V, --verbose            Print more information.
  -p, --prefix PREFIX      Preprend PREFIX to every file.
  -h, --help               Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
	exit 0;;
    -*)
	elem2xxx_usage;;
    *)
	if test -z "$package" -a "$elem2" = package; then package="$1"; shift 1; else elem2xxx_usage; fi;;
    esac
    done

    if test -n "$verbose" -a -n "$prefix"; then
	echo "Prefix: $verbose" 1>&2
    fi

    # expand list of files
    if test -n "$prefix"; then
	prefix=`echo "$prefix" | sed 's/\//\\\//'`
	files=`grep -v '^#' | sed 's/^/'"$prefix"'/'`
    else
	files=`grep -v '^#'`
    fi

    # output files!
    if test -n "$package"; then
	# also search /dev/null so there are always at least two files
	grep '^EXPORT_ELEMENT' $files /dev/null | $awk -F: 'BEGIN {
  OFS = ""; nrebecca = 0; packname="'"$package"'";
}
{
  sub(/\.cc/, ".hh", $1);
  INCLUDES[$1] = 1;
  sub(/EXPORT_ELEMENT\(/, "", $2);
  sub(/\)/, "", $2);
  B = B "  CLICK_DMALLOC_REG(\"" $2 "\");\n  hatred_of_rebecca[" nrebecca "] = click_add_element_type(0, new " $2 ");\n";
  C = C "  click_remove_element_type(hatred_of_rebecca[" nrebecca "]);\n";
  nrebecca++;
}
END {
  print "/* Generated by \"click-buildtool elem2package\" on '"$date"' */";
  print "/* Package name: ", packname, " */\n";
  print "#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n#include <click/config.h>\n#include <click/package.hh>\n#include <click/glue.hh>";
  for (file in INCLUDES) {
    print "#include \"", file, "\"";
  }
  print "static int hatred_of_rebecca[", nrebecca, "];";
  print "extern \"C\" int\ninit_module()\n{\n  click_provide(\"", packname, "\");";
  print B, "  CLICK_DMALLOC_REG(\"nXXX\");\n  while (MOD_IN_USE > 1)\n    MOD_DEC_USE_COUNT;\n  return 0;\n}";
  print "extern \"C\" void\ncleanup_module()\n{\n", C, "  click_unprovide(\"", packname, "\");\n}";
}
'

    else
	# also search /dev/null so there are always at least two files
	grep '^EXPORT_ELEMENT' $files /dev/null | $awk -F: 'BEGIN {
   OFS = "";
}
{
  sub(/\.cc/, ".hh", $1);
  INCLUDES[$1] = 1;
  sub(/EXPORT_ELEMENT\(/, "", $2);
  sub(/\)/, "", $2);
  B = B "  CLICK_DMALLOC_REG(\"" $2 "\");\n  lexer->add_element_type(new " $2 ");\n";
}
END {
  print "/* Generated by \"click-buildtool elem2export\" on '"$date"' */\n";
  print "#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n#include <click/config.h>\n#include <click/package.hh>\n#include <click/lexer.hh>";
  for (file in INCLUDES) {
    print "#include \"", file, "\"";
  }
  print "void\nexport_elements(Lexer *lexer)\n{";
  print B, "  CLICK_DMALLOC_REG(\"nXXX\");\n}";
}
'
    fi
}


################
# MAIN PROGRAM #
################

if test $# = 0; then
    # force usage message
    set crapfunc
fi

while [ x"$1" != x ]; do
case $1 in
  -V|--v|--ve|--ver|--verb|--verbo|--verbos|--verbose)
     verbose=1; shift 1;;
  -h|--h|--he|--hel|--help)
     cat <<'EOF' 1>&2
`Click-buildtool' is a set of tools used when building Click. For information
on a particular tool, run `click-buildtool TOOLNAME --help'.

Usage: click-buildtool findelem [-a] [-V] [-p PREFIX] < [FILES AND DIRECTORIES]
   or: click-buildtool elem2make [-V] [-p PREFIX] < [ELEMENTS]
   or: click-buildtool elem2export [-V] [-p PREFIX] < [ELEMENTS]
   or: click-buildtool elem2package [-V] [-p PREFIX] PACKAGENAME < [ELEMENTS]

Options:
  -V, --verbose            Print more information.
  -h, --help               Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
     exit 0;;
  findelem)
     shift 1; findelements "$@"; exit 0;;
  elem2make)
     elem2="make"; shift 1; elem2make "$@"; exit 0;;
  elem2export)
     elem2="export"; shift 1; elem2xxx "$@"; exit 0;;
  elem2package)
     elem2="package"; shift 1; elem2xxx "$@"; exit 0;;
  *)
     echo "Usage: click-buildtool TOOLNAME [ARGUMENTS]
Try \`click-buildtool --help' for more information." 1>&2
     exit 1;;
esac
done
