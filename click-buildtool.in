#! /bin/sh

# click-buildtool -- build tools for Click
# Eddie Kohler
#
# Copyright (c) 2000-2001 Massachusetts Institute of Technology
# Copyright (c) 2000-2004 Mazu Networks, Inc.
# Copyright (c) 2001-2003 International Computer Science Institute
# Copyright (c) 2004-2005 Regents of the University of California
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, subject to the conditions
# listed in the Click LICENSE file. These conditions include: you must
# preserve this copyright notice, and you cannot mention the copyright
# holders in advertising related to the Software without their permission.
# The Software is provided WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED. This
# notice is a summary of the Click LICENSE file; the license in that file is
# legally binding.

prefix=@prefix@
exec_prefix=@exec_prefix@
datadir=@datadir@
clickdatadir=${datadir}/click

verbose=""
elem2=""
default_provisions="@provisions@"
driver_provisions="@DRIVERS@"

# find a good version of awk
if test -x /usr/bin/gawk; then
    awk=gawk
elif test -x /usr/bin/nawk; then
    awk=nawk
else
    awk=awk
fi



findelem_usage () {
    echo "Usage: click-buildtool findelem [-a] [-V] [-p PREFIX] < [FILES AND DIRECTORIES]
Try 'click-buildtool findelem --help' for more information." 1>&2
    exit 1
}

elementmap_provisions () {
    elementmap="$1"
    grep "^<elementmap \|^<entry " <"$elementmap" | $awk '/ name="([^"]*)"/ {
  sub(/.* name="/, "", $0);
  sub(/".*/, "", $0);
  prov[$0] = 1;
}
/ provides="([^"]*)"/ {
  sub(/.* provides="/, "", $0);
  sub(/".*/, "", $0);
  split($0, d, / +/);
  for (j in d) prov[d[j]] = 1;
}
END {
  # delete references to drivers
  delete prov["userlevel"]; delete prov["linuxmodule"]; 
  delete prov["bsdmodule"]; delete prov["ns"];
  for (j in prov) print j;
}'
}

findelem () {
    pfx=
    all=
    provisions=
    filenames=
    standards=
    unprovisions='false 0'
    while [ x"$1" != x ]; do
    case $1 in
    -S|--s|--st|--sta|--stan|--stand|--standa|--standar|--standard|--standards)
	standards=1; shift 1;;
    -p|--pre|--pref|--prefi|--prefix)
	if test $# -lt 2; then findelem_usage; fi
	shift 1; pfx="$1/"; shift 1;;
    -p*)
	pfx="`echo "$1" | sed 's/^-p//'`"/; shift 1;;
    --pre=*|--pref=*|--prefi=*|--prefix=*)
	pfx="`echo "$1" | sed 's/^[^=]*=//'`"/; shift 1;;
    -f|--filenames)
	filenames=f; shift 1;;
    -F|--filename-|--filename-p|--filename-pa|--filename-pai|--filename-pair|--filename-pairs)
	filenames=F; shift 1;;
    -V|--verb|--verbo|--verbos|--verbose)
	verbose=1; shift 1;;
    -a|--a|--al|--all)
	all=1; shift 1;;
    -r|--pro|--prov|--provi|--provid|--provide)
	if test $# -lt 2; then findelem_usage; fi
	shift 1; provisions="$1
$provisions"; shift 1;;
    -r*)
	provisions="`echo "$1" | sed 's/^-r//'`
$provisions"; shift 1;;
    --pro=*|--prov=*|--provi=*|--provid=*|--provide=*)
	provisions="`echo "$1" | sed 's/^[^=]*=//'`
$provisions"; shift 1;;
    -x|--u|--un|--unp|--unpr|--unpro|--unprov|--unprovi|--unprovid|--unprovide)
	if test $# -lt 2; then findelem_usage; fi
	shift 1; unprovisions="$1
$unprovisions"; shift 1;;
    -x*)
	unprovisions="`echo "$1" | sed 's/^-x//'`
$unprovisions"; shift 1;;
    --u=*|--un=*|--unp=*|--unpr=*|--unpro=*|--unprov=*|--unprovi=*|--unprovid=*|--unprovide=*)
	unprovisions="`echo "$1" | sed 's/^[^=]*=//'`
$unprovisions"; shift 1;;
    -e|--e|--el|--ele|--elem|--eleme|--elemen|--element|--elementm|--elementma|--elementmap)
	if test $# -lt 2; then findelem_usage; fi
	shift 1; provisions="`elementmap_provisions "$1"`
$provisions"; shift 1;;
    -e*)
	emap="`echo "$1" | sed 's/^-e//'`"
	provisions="`elementmap_provisions "$emap"`
$provisions"; shift 1;;
    --e=*|--el=*|--ele=*|--elem=*|--eleme=*|--elemen=*|--element=*|--elementm=*|--elementma=*|--elementmap=*)
	emap="`echo '$1' | sed 's/^[^=]*=//'`"
	provisions="`elementmap_provisions "$emap"`
$provisions"; shift 1;;
    -P|--pa|--pac|--pack|--packa|--packag|--package)
	provisions="`elementmap_provisions "${clickdatadir}/elementmap.xml"`
$provisions"; shift 1;;
    -h|--h|--he|--hel|--help)
	cat <<'EOF' 1>&2
'Click-buildtool findelem' locates valid Click element source code. It starts
with a collection of source code, then eliminates files whose requirements
are not available until reaching a stable set of sources. It expects a list of
files and directories on standard input. Directories are searched for .cc/.c
source files. Only files containing EXPORT_ELEMENT() or ELEMENT_PROVIDES() are
considered. The initial list of available requirements is the list of
requirements specified with '-r', plus the list of EXPORT_ELEMENT() and
ELEMENT_PROVIDES() keywords.

Usage: click-buildtool findelem [OPTIONS] < [FILES AND DIRECTORIES]

Options:
  -a, --all                  Include all subdirectories of 'elements' rather
                             than reading standard input, and pretend all
                             requirements are available (except for '-x').
  -V, --verbose              Print more information about dependency checking.
  -p, --prefix PREFIX        Prepend PREFIX to every file and/or directory.
  -r, --provide REQ          Provide requirement(s) in REQ.
  -e, --elementmap EMAP      Provide requirement(s) from EMAP.
  -P, --package              Provide requirement(s) from default elementmap.
  -S, --standards            Mark standard elements as available.
  -x, --unprovide REQ        Mark requirement(s) REQ as unavailable.
  -f, --filenames            Output filenames only.
  -F, --filename-pairs       Output "sourcefile:headerfile" pairs for elements.
  -h, --help                 Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
	exit 0;;
    *)
	findelem_usage;;
    esac
    done

    if test -n "$verbose" -a -n "$pfx"; then
	echo "Prefix: $pfx" 1>&2
    fi

    # add defaults to provisions
    provisions="$provisions $default_provisions"

    # add standards to provisions if necessary
    if test "x$standards" != x; then
	provisions="$provisions AddressInfo AlignmentInfo DriverManager ErrorElement PortInfo ScheduleInfo Storage"
    fi

    # expand provisions and unprovisions: require one per line
    provisions=`echo "$provisions" | tr -s ' \011\015\014\013' '\012'`
    unprovisions=`echo "$unprovisions" | tr -s ' \011\015\014\013' '\012'`
    if test -n "$verbose" -a -n "$provisions"; then
	echo 1>&2
	echo "Provisions: $provisions" 1>&2
    fi
    if test -n "$verbose" -a -n "$unprovisions"; then
	echo 1>&2
	echo "Unprovisions: $unprovisions" 1>&2
    fi

    # expand list of files
    if test -n "$all"; then
	first_files=`cd ${pfx}elements >/dev/null && ls`
	bad_first_files=`echo "$first_files
$unprovisions" | sort | uniq -d`
	first_files=`echo "$first_files
$bad_first_files" | sort | uniq -u`
    else
	first_files=`cat`
    fi

    files=""
    for i in $first_files; do
	ppfx="$pfx"
	if test -d "${pfx}elements/$i" && echo "$i" | grep -v '^\.' >/dev/null; then
	    ppfx="${pfx}elements/"
	fi
	if test -d "${ppfx}$i"; then
	    files="$files
"`find ${ppfx}$i -follow \( -name \*.cc -o -name \*.c \) -print | grep -v '/[.,][^/]*$'`
	elif test -r "${ppfx}$i"; then
	    files="$files
${ppfx}$i"
	fi
    done
    files=`echo "$files" | sort | uniq | grep .`

    # die if no files
    if test -z "$files"; then
	echo "no files found" 1>&2
	exit 1
    fi

    # if '$all', then accept all dependencies except the unprovisions
    dep_test='<='
    if test -n "$all"; then
	dep_test='<'
    fi

    # check dependencies: generate a list of bad files, then remove those files
    # from the list of good files

    # first remove files that provide an unprovision
    awk_exports=`echo "$unprovisions" | sed 's/\(..*\)/dep["\1"]=-1;/'`
    bad_files=`egrep '^EXPORT_ELEMENT|^ELEMENT_PROVIDES' $files | sed 's/EXPORT_ELEMENT[ 	]*(\(.*\)).*/\1/
s/ELEMENT_PROVIDES[ 	]*(\(.*\)).*/\1/' | $awk -F: 'BEGIN {OFS="";'"$awk_exports"'}
{
  split($2, deps, / +/);
  for (j in deps) {
    if (dep[deps[j]] < 0) {
      print $1;
      break;
    }
  }
}' | sort | uniq`
    if test -n "$verbose" -a -n "$bad_files"; then
	echo 1>&2
	echo "Files: $files" 1>&2
	echo 1>&2
	echo "Bad files: $bad_files" 1>&2
    fi
    if test -n "$bad_files"; then
	files=`echo "$files
$bad_files" | sort | uniq -u`
    fi

    # then cycle, removing files that require something not provided
    while true; do
	provides=`egrep '^EXPORT_ELEMENT|^ELEMENT_PROVIDES' $files | sed 's/.*(\(.*\)).*/\1/' | tr ' \011' '\012'`
	awk_exports=`echo "$provides"'
'"$provisions" | sed 's/\(..*\)/dep["\1"]=1;/'`"
"`echo "$unprovisions" | sed 's/\(..*\)/dep["\1"]=-1;/'`
	new_bad_files=`grep '^ELEMENT_REQUIRES' $files | sed 's/ELEMENT_REQUIRES[ 	]*(\(.*\)).*/\1/' | $awk -F: 'BEGIN {OFS="";'"$awk_exports"'dep["true"]=1; dep["1"]=1;}
{
  split($2, deps, / +/);
  for (j in deps) {
    i = deps[j]
    if (dep[i] <= 0) {
      bad = 1;
      split(i, or_deps, /\|+/);
      for (k in or_deps) {
	if (!(dep[or_deps[k]] '"$dep_test"' 0))
	  bad = 0;
      }
      if (bad) {
	print $1;
	break;
      }
    }
  }
}' | sort | uniq`
	if test -n "$verbose"; then
	    echo 1>&2
	    echo "Files: $files" 1>&2
	    echo 1>&2
	    echo "Bad files: $new_bad_files" 1>&2
	fi
	if test -z "$new_bad_files"; then
	    break
	else
	    files=`echo "$files
$new_bad_files" | sort | uniq -u`
	    bad_files="$new_bad_files
$bad_files"
	fi
    done

    header_files=`echo "$files" | sed 's/\.cc/\.hh/'`

    # generate output
    if test "$filenames" = f; then
	postprocess="$awk '{ print \$1 }'"
    elif test "$filenames" = F; then
	postprocess="$awk '{ if (NF > 2) printf "'"%s:%s\n", $1, $2; else print $1; }'"'"
    else
	echo "# Generated by 'click-buildtool findelem' on" `date`
	postprocess=sort
    fi

    egrep '^ELEMENT_PROVIDES|^EXPORT_ELEMENT|^ELEMENT_HEADER|^class|^[ 	]*const *char *\* *class_name|^[ 	]*static *void *static_[ic]|^}' $files $header_files /dev/null 2>/dev/null | $awk -F: 'BEGIN {
  OFS = ""; cur_class = ""
}
/:class[ 	]/ {
  sub(/^class[ 	]*/, "", $2);
  sub(/[ 	]*$/, "", $2);
  cur_class = $2;
  next
}
/:}/ {
  cur_class = "";
  next
}
/:EXPORT_ELEMENT/ {
  sub(/.*EXPORT_ELEMENT[ 	]*\(/, "", $2);
  sub(/\).*/, "", $2);
  if (exports[$1] != "") {
    exports[$1] = exports[$1] " " $2
  } else {
    exports[$1] = $2
  }
  next
}
/:ELEMENT_PROVIDES/ {
  if (!($1 in exports)) {
    exports[$1] = ""
  }
  next
}
/:ELEMENT_HEADER/ {
  sub(/.*ELEMENT_HEADER[ 	]*\(/, "", $2)
  sub(/\).*/, "", $2)
  header[$1] = $2
  next
}
/class_name/ {
  sub(/.*return "/, "", $0);
  sub(/".*/, "", $0);
  class_name[cur_class] = $0
  next
}
/static_initialize/ {
  static_initialize[cur_class] = 1
  next
}
/static_cleanup/ {
  static_cleanup[cur_class] = 1
  next
}
END {
  n = 0
  for (i in exports) {
    ex = exports[i]
    if (ex == "") {
      print i
      n++
    } else {
      if (header[i] == "") {
	header[i] = "\"" i "\""; sub(/\.cc/, ".hh", header[i])
      }
      split(ex, exes, / /); ex = ""
      for (j in exes) {
        dash = index(exes[j], "-")
	if (dash == 0) {
	  dash = length(exes[j]);
          if (class_name[exes[j]] == "")
            exes[j] = exes[j] "-" exes[j];
          else
            exes[j] = exes[j] "-" class_name[exes[j]];
        }
	ex = ex exes[j] " ";
	klass = substr(exes[j], 1, dash)
        if (static_initialize[klass]) {
	  ex = ex klass "-!si ";
	  static_initialize[klass] = 0
	}
        if (static_cleanup[klass]) {
	  ex = ex klass "-!sc ";
	  static_cleanup[klass] = 0
	}
      }
      print i, "\t", header[i], "\t", ex
      n++
    }
  }
  if (n == 0)
    print "click-buildtool: warning: No elements found" | "cat 1>&2"
}' | eval "$postprocess"

}




elem2xxx_usage () {
    echo -n "Usage: click-buildtool elem2$elem2 [-p PREFIX] [-V]" 1>&2
    if test "$elem2" = package; then echo -n " PKGNAME" 1>&2; fi
    echo " < elements.conf
Try 'click-buildtool elem2$elem2 --help' for more information." 1>&2
    exit 1
}


elem2make () {
    driver=""
    makevar=""
    date=`date`
    linux26=""
    while [ x"$1" != x ]; do
    case $1 in
    -t|--d|--dr|--dri|--driv|--drive|--driver)
	if test $# -lt 2; then elem2xxx_usage; fi
	shift 1; driver="$1"; shift 1;;
    -t*)
	driver=`echo "$1" | sed 's/^-D//'`; shift 1;;
    --d=*|--dr=*|--dri=*|--driv=*|--drive=*|--driver=*)
	driver=`echo "$1" | sed 's/^[^=]*=//'`; shift 1;;
    --t|--ta|--tar|--targ|--targe|--target)
	if test $# -lt 2; then elem2xxx_usage; fi
	shift 1; driver="$1"; shift 1;;
    --t=*|--ta=*|--tar=*|--targ=*|--targe=*|--target=*)
	driver=`echo "$1" | sed 's/^[^=]*=//'`; shift 1;;
    -v|--m|--ma|--mak|--make|--make-|--make-v|--make-va|--make-var|--make-vari|--make-varia|--make-variab|--make-variabl|--make-variable)
	if test $# -lt 2; then elem2xxx_usage; fi
	shift 1; makevar="$1"; shift 1;;
    -v*)
	makevar=`echo "$1" | sed 's/^-v//'`; shift 1;;
    --m=*|--ma=*|--mak=*|--make=*|--make-=*|--make-v=*|--make-va=*|--make-var=*|--make-vari=*|--make-varia=*|--make-variab=*|--make-variabl=*|--make-variable=*)
	makevar=`echo "$1" | sed 's/^[^=]*=//'`; shift 1;;
    -x|--e|--ex|--exc|--excl|--exclu|--exclud|--exclude)
        if test $# -lt 2; then elem2xxx_usage; fi
	shift 1
	for i in $1; do excludes=";/^$i"' \\$'"/d$excludes"; done
	shift 1;;
    -x*)
	this_exclude=`echo "$1" | sed 's/^-p//'`
	for i in $this_exclude; do excludes=";/^$i"' \\$'"/d$excludes"; done
	shift 1;;
    --e=*|--ex=*|--exc=*|--excl=*|--exclu=*|--exclud=*|--exclude=*)
	this_exclude=`echo "$1" | sed 's/^[^=]*=//'`
	for i in $this_exclude; do excludes=";/^$i"' \\$'"/d$excludes"; done
	shift 1;;
    --l|--li|--lin|--linu|--linux|--linux2|--linux26)
	linux26=1; shift 1;;
    -V|--verb|--verbo|--verbos|--verbose)
	verbose=1; shift 1;;
    -h|--h|--he|--hel|--help)
	cat <<'EOF' 1>&2
'Click-buildtool elem2make' reads an 'elements.conf' file generated by
'click-buildtool findelem' on the standard input, and writes a Makefile
fragment defining the ELEMENT_OBJS variable to the standard output.

Usage: click-buildtool elem2make [-t DRIVER] [-V] < elements.conf

Options:
  -t, --driver DRIVER      Set target driver to DRIVER ('userlevel',
                           'linuxmodule', 'bsdmodule', or 'ns').
  -v, --make-variable N    Use make variable N.
      --linux26            Generate Linux 2.6-style makefile fragment.
  -x, --exclude FILE       Do not include FILE.
  -V, --verbose            Print more information.
  -h, --help               Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
	exit 0;;
    *)
	elem2xxx_usage;;
    esac
    done

    osuffix=".o"
    defmakevar="ELEMENT_OBJS"
    if test -n "$driver"; then
	if test "$driver" = 'user' -o "$driver" = 'userlevel'; then
	    osuffix=".uo"
	    defmakevar="U_ELEMENT_OBJS"
	elif test "$driver" = 'kernel' -o "$driver" = 'linuxmodule'; then
	    osuffix=".ko"
	    defmakevar="K_ELEMENT_OBJS"
	elif test "$driver" = 'bsdmodule'; then
	    osuffix=".bo"
	    defmakevar="B_ELEMENT_OBJS"
	elif test "$driver" = 'ns' -o "$driver" = 'nsmodule'; then
	    osuffix=".no"
	    defmakevar="NS_ELEMENT_OBJS"
	else
	    echo "Unknown driver $driver" 1>&2
	    exit 1
	fi
    fi
    if test -z "$makevar"; then
	makevar=$defmakevar
    fi

    # expand list of files
    files=`grep -v '^#' | sed 's/[ 	].*//'`

    # output
    echo "# Generated by 'click-buildtool elem2make' on" `date`
    if test -n "$linux26"; then
	echo "$files" | $awk '
BEGIN { nsubdirs = 1; OFS = ""; subdirs[0] = "" }
{   sub(/\.cc*$/, "'"$osuffix"'");
    i = match($0, /\/[^\/]*$/);
    if (i == 0)
	elements[0] = elements[0] $0 " \\\n";
    else {
	dir = substr($0, 1, RSTART);
	file = substr($0, RSTART + 1);
	if (dir in subdirid)
	    dirid = subdirid[dir];
	else {
	    dirid = nsubdirs++;
	    subdirid[dir] = dirid;
	    subdirs[dirid] = dir;
	}
	elements[dirid] = elements[dirid] file " \\\n";
    }
}
END {
    for (i = 0; i < nsubdirs; i++) {
	print "'"$makevar"'__", i, " = \\\n", elements[i];
	allsubdirs = allsubdirs "$(ELEMENT_OBJS__" i ") \\\n";
    }
    print "'"$makevar"' = \\\n", allsubdirs;
    for (i = 0; i < nsubdirs; i++) {
	print "$(addprefix $(obj)/,$(ELEMENT_OBJS__", i, ")): $(obj)/%.o : $(obj)/", subdirs[i], "%.cc";
	print "	$(call if_changed_dep,cxxcompile)";
    }
}' | sed "$excludes"
    else
	echo "$makevar = \\"
	echo "$files" | sed -e 's/\.cc*$/'"$osuffix"' \\/;s/^.*\///'"$excludes" | grep .
    fi
    echo
}


elem2xxx () {
    package=""
    date=`date`
    standards=''
    includes=''
    while [ x"$1" != x ]; do
    case $1 in
    -S|--s|--st|--sta|--stan|--stand|--standa|--standar|--standard|--standards)
	standards=1; shift 1;;
    -V|--verb|--verbo|--verbos|--verbose)
	verbose=1; shift 1;;
    -i|--i|--in|--inc|--incl|--inclu|--includ|--include)
	if test $# -lt 2; then elem2xxx_usage; fi
	includes="$includes print '#include $2';"; shift 2;;
    -i*)
	this_include=`echo "$1" | sed 's/^-i//'`
	includes="$includes print '#include $this_include';"; shift 1;;
    --i=*|--in=*|--inc=*|--incl=*|--inclu=*|--includ=*|--include=*)
	this_include=`echo "$1" | sed 's/^[^=]*=//'`
	includes="$includes print '#include $this_include';"; shift 1;;
    -h|--h|--he|--hel|--help)
	if test "$elem2" = export; then
	    cat <<'EOF' 1>&2
'Click-buildtool elem2export' reads an 'elements.conf' file generated by
'click-buildtool findelem' on the standard input, examines those files for
exported elements, and writes a C++ source file defining the 
click_export_elements() function to the standard output.

Usage: click-buildtool elem2export [-V] < elements.conf
EOF
	elif test "$elem2" = package; then
	    cat <<'EOF' 1>&2
'Click-buildtool elem2package' reads an 'elements.conf' file generated by
'click-buildtool findelem' on the standard input, examines those files for
exported elements, and writes a C++ source file suitable for creating a
dynamically linked package with those elements to the standard output. PKGNAME
is the name of the package.

Usage: click-buildtool elem2package [-p PREFIX] [-V] PKGNAME < elements.conf
EOF
	fi
	cat <<'EOF' 1>&2

Options:
  -S, --standards          Export standard required elements as well.
  -i, --include HDR        Emit "#include HDR" at top of file.
  -V, --verbose            Print more information.
  -h, --help               Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
	exit 0;;
    -*)
	elem2xxx_usage;;
    *)
	if test -z "$package" -a "$elem2" = package; then package="$1"; shift 1; else elem2xxx_usage; fi;;
    esac
    done

    # set up awk program
    if test -n "$package"; then
	includes="  $includes "'print "#define WANT_MOD_USE_COUNT 1\n#include <click/config.h>\n#include <click/package.hh>\n#include <click/glue.hh>";
  for (file in INCLUDES) {
    if (file != "-") print "#include ", file;
  }'
	awk_program='BEGIN {
  OFS = ""; nrebecca = 0; packname="'"$package"'";
}
/^#/ { next; }
{
  if (NF == 1)
    next;
  INCLUDES[$2] = 1;
  for (i = 3; i <= NF; i++) {
    split($i, ans, /-/);
    if (ans[2] == "!si")
      B = B "  " ans[1] "::static_initialize();\n";
    else if (ans[2] == "!sc")
      C = C "  " ans[1] "::static_cleanup();\n";
    else {
      B = B "  hatred_of_rebecca[" nrebecca "] = click_add_element_type(\"" ans[2] "\", beetlemonkey, " nrebecca ");\n"
      C = C "  click_remove_element_type(hatred_of_rebecca[" nrebecca "]);\n";
      D = D "   case " nrebecca ": return new " ans[1] ";\n";
      nrebecca++;
    }
  }
}
END {
  print "/* Generated by \"click-buildtool elem2package\" on '"$date"' */";
  print "/* Package name: ", packname, " */\n";
'"$includes"'
  print "\nCLICK_USING_DECLS";
  print "static int hatred_of_rebecca[", nrebecca, "];";
  print "static Element *\nbeetlemonkey(uintptr_t heywood)\n{\n  switch (heywood) {\n", D, "   default: return 0;\n  }\n}\n";
  print "#ifdef CLICK_LINUXMODULE\n#define click_add_element_type(n, f, t) click_add_element_type((n), (f), (t), THIS_MODULE)\n#endif";
  print "#ifdef CLICK_BSDMODULE\nstatic int\nmodevent(module_t, int t, void *)\n{\n  if (t == MOD_LOAD) {\n#else\nextern \"C\" int\ninit_module()\n{\n#endif";
  print "  click_provide(\"", packname, "\");\n", B, "  CLICK_DMALLOC_REG(\"nXXX\");\n  return 0;";
  print "#ifdef CLICK_BSDMODULE\n  } else if (t == MOD_UNLOAD) {\n#else\n}\nextern \"C\" void\ncleanup_module()\n{\n#endif";
  print C, "  click_unprovide(\"", packname, "\");";
  print "#ifdef CLICK_BSDMODULE\n  return 0;\n  } else\n    return 0;\n}\nstatic moduledata_t modinfo = {\n  \"", packname, "\", modevent, 0\n};\nDECLARE_MODULE(", packname, ", modinfo, SI_SUB_PSEUDO, SI_ORDER_ANY);\n#else\n}\n#endif";
}
'

    else
	includes="$includes"'  print "#include <click/config.h>\n#include <click/package.hh>";
  for (file in INCLUDES) {
    if (file != "-") print "#include ", file;
  }'
	awk_program='BEGIN {
  OFS = ""; nrebecca = 0;
}
/^#/ { next; }
{
  if (NF == 1)
    next;
  INCLUDES[$2] = 1;
  for (i = 3; i <= NF; i++) {
    split($i, ans, /-/);
    if (ans[2] == "!si")
      B = B "  " ans[1] "::static_initialize();\n";
    else if (ans[2] == "!sc")
      C = C "  " ans[1] "::static_cleanup();\n";
    else {
      B = B "  (void) click_add_element_type(\"" ans[2] "\", beetlemonkey, " nrebecca ");\n";
      D = D "   case " nrebecca ": return new " ans[1] ";\n";
    }
    nrebecca++;
  }
}
END {
  print "/* Generated by \"click-buildtool elem2export\" on '"$date"' */\n";
'"$includes"'
  print "CLICK_USING_DECLS";
  print "static Element *\nbeetlemonkey(uintptr_t heywood)\n{\n  switch (heywood) {\n", D, "   default: return 0;\n  }\n}\n";
  print "#ifdef CLICK_LINUXMODULE\n#define click_add_element_type(n, f, t) click_add_element_type((n), (f), (t), 0)\n#endif";
  print "void\nclick_export_elements()\n{\n", B, "  CLICK_DMALLOC_REG(\"nXXX\");\n}\n";
  print "void\nclick_unexport_elements()\n{\n", C, "}";
}
'
    fi

    # Actually generate the command!
    if test -z "$standards"; then
	$awk "$awk_program"
    else
	cat <<EOF >/tmp/click-buildtool-standards.$$
-	<click/standard/addressinfo.hh>	AddressInfo-AddressInfo
-	<click/standard/alignmentinfo.hh>	AlignmentInfo-AlignmentInfo
-	<click/standard/drivermanager.hh>	DriverManager-DriverManager
-	<click/standard/errorelement.hh>	ErrorElement-ErrorElement
-	<click/standard/portinfo.hh>	PortInfo-PortInfo
-	<click/standard/scheduleinfo.hh>	ScheduleInfo-ScheduleInfo
EOF
	cat - /tmp/click-buildtool-standards.$$ | $awk "$awk_program"
	/bin/rm -f /tmp/click-buildtool-standards.$$
    fi
}


provides_usage () {
    echo "Usage: click-buildtool provides [REQS]" 1>&2
    echo "Try 'click-buildtool provides --help' for more information." 1>&2
    exit 1
}

provides () {
    provisions="$default_provisions
$driver_provisions
"`elementmap_provisions ${clickdatadir}/elementmap.xml`
    requirements=""
    stdin=n; query=n; print=n
    while [ x"$1" != x ]; do
    case $1 in
    -q|--q|--qu|--que|--quer|--query)
	query=y; shift 1;;
    -l|--pri|--prin|--print)
	print=y; shift 1;;
    -r|--pro|--prov|--provi|--provid|--provide)
	if test $# -lt 2; then provides_usage; fi
	shift 1; provisions="$1
$provisions"; shift 1;;
    -r*)
	provisions=`echo "$1" | sed 's/^-r//'`"
$provisions"; shift 1;;
    --p=*|--pr=*|--pro=*|--prov=*|--provi=*|--provid=*|--provide=*)
	provisions=`echo "$1" | sed 's/^[^=]*=//'`"
$provisions"; shift 1;;
    -e|--e|--el|--ele|--elem|--eleme|--elemen|--element|--elementm|--elementma|--elementmap)
	if test $# -lt 2; then provides_usage; fi
	shift 1; provisions=`elementmap_provisions $1`"
$provisions"; shift 1;;
    -e*)
	emap=`echo "$1" | sed 's/^-e//'`
	provisions=`elementmap_provisions $emap`"
$provisions"; shift 1;;
    --e=*|--el=*|--ele=*|--elem=*|--eleme=*|--elemen=*|--element=*|--elementm=*|--elementma=*|--elementmap=*)
	emap=`echo "$1" | sed 's/^[^=]*=//'`
	provisions=`elementmap_provisions $emap`"
$provisions"; shift 1;;
    -h|--h|--he|--hel|--help)
	cat <<'EOF' 1>&2
'Click-buildtool provides' exits with status 0 if the Click installation
provides all requirement(s) in REQ arguments, and status 1 otherwise.

Usage: click-buildtool provides [OPTIONS] [REQ...]

Options:
  -q, --query              Print provisions to standard output.
  -r, --provide REQ        Provide requirement(s) in REQ.
  -e, --elementmap EMAP    Provide requirement(s) from EMAP.
  -l, --print              Print 0 (REQs not provided) or 1 (REQs provided).
  -h, --help               Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
	exit 0;;
    -)
	stdin=y; shift 1;;
    -*)
	provides_usage;;
    *)
	requirements="$1
$requirements"; shift 1;;
    esac
    done

    [ $stdin = y ] && requirements="`cat` $requirements"
    provisions="`echo "$provisions" | tr -s ' \011\015\014\013' '\012' | grep . | sort | uniq`"
    [ $query = y ] && echo "$provisions"
    requirements="`echo "$requirements" | tr -s ' \011\015\014\013' '\012' | grep . | sort | uniq`"
    awk_provisions="`echo "$provisions" | sed 's/\(..*\)/dep["\1"]=1;/'`"
    echo "$requirements" | $awk -F: 'BEGIN {
'"$awk_provisions"'
}
/./ { if (!dep[$1]) exit 1; }' >/dev/null 2>&1
    status=$?
    [ $print = y ] && expr 1 - $status
    exit $status
}


findpackage_usage () {
    echo "Usage: click-buildtool findpackage [REQS]" 1>&2
    echo "Try 'click-buildtool findpackage --help' for more information." 1>&2
    exit 1
}

findpackage () {
    provisions="$default_provisions
"`elementmap_provisions ${clickdatadir}/elementmap.xml`
    requirements=""
    stdin=n
    while [ x"$1" != x ]; do
    case $1 in
    -C|--c|--cl|--cli|--clic|--click|--clickp|--clickpa|--clickpat|--clickpath)
	if test $# -lt 2; then findpackage_usage; fi
	shift 1; CLICKPATH="$1"; shift 1;;
    -C*)
	CLICKPATH=`echo "$1" | sed 's/^-C//'`; shift 1;;
    --c=*|--cl=*|--cli=*|--clic=*|--click=*|--clickp=*|--clickpa=*|--clickpat=*|--clickpath=*)
	CLICKPATH=`echo "$1" | sed 's/^[^=]*=//'`; shift 1;;
    -h|--h|--he|--hel|--help)
	cat <<'EOF' 1>&2
'Click-buildtool findpackage' exits with status 0 if the Click installation
provides all requirement(s) in REQ arguments, and status 1 otherwise.

Usage: click-buildtool findpackage [OPTIONS] [REQ...]

Options:
  -C, --clickpath PATH       Use PATH for CLICKPATH.
  -h, --help                 Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
	exit 0;;
    -)
	stdin=y; shift 1;;
    -*)
	findpackage_usage;;
    *)
	requirements="$1
$requirements"; shift 1;;
    esac
    done

    # expand CLICKPATH to find all elementmap.xml files
    [ -z "$CLICKPATH" ] && CLICKPATH=:
    default_datadir="$clickdatadir"
    elementmaps=
    for pathcmp in `echo "'$CLICKPATH'" | sed "s/:/' '/g"`; do
	pathcmp="`echo "$pathcmp" | sed "s/^'\(.*\)'/\1/"`"
	[ -z "$pathcmp" -a -z "$default_datadir" ] && continue
	if [ -z "$pathcmp" ]; then
	    pathcmp="$default_datadir"; default_datadir=
	elif [ -d "$pathcmp/share/click" ]; then
	    pathcmp="$pathcmp/share/click"
	else
	    pathcmp="$pathcmp/share"
	fi
	elementmaps="$elementmaps `ls "$pathcmp"/elementmap*.xml 2>/dev/null`"
    done

    [ $stdin = y ] && requirements="`cat` $requirements"
    output=
    while [ -n "$requirements" ]; do
	requirements=`echo "$requirements" | tr -s ' \011\015\014\013' '\012' | grep . | sort | uniq`
	grep_requirements=`echo -n "$requirements" | tr '\012' ' ' | sed 's/ /\\\\|/g'`
	grep " name=['"'"'"]$grep_requirements['"'"]' $elementmaps 
    done
    exit 0
}


quietlink_usage () {
    echo "Usage: click-buildtool quietlink" 1>&2
    echo "Try 'click-buildtool quietlink --help' for more information." 1>&2
    exit 1
}

quietlink () {
    while [ x"$1" != x ]; do
    case $1 in
    -h|--h|--he|--hel|--help)
	cat <<'EOF' 1>&2
'Click-buildtool quietlink' quiets the GNU linker when linking an element
package. Specifically, it removes undefined reference complaints.

Usage: ld ... 2>&1 | click-buildtool quietlink

Options:
  -h, --help                 Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
	exit 0;;
    *)
	quietlink_usage;;
    esac
    done

    $awk -F: 'BEGIN {
  context = ""
}
/: In function/ {
  context = $0
  next
}
/: undefined reference to/ {
  next
}
/: more undefined references to/ {
  next
}
{
  if (context != "") {
    print context
    context = ""
  }
  print $0
}' 1>&2
}


prefix_usage () {
    echo "Usage: click-buildtool prefix" 1>&2
    echo "Try 'click-buildtool prefix --help' for more information." 1>&2
    exit 1
}

prefix () {
    while [ x"$1" != x ]; do
    case $1 in
    -h|--h|--he|--hel|--help)
	cat <<'EOF' 1>&2
'Click-buildtool prefix' prints the Click prefix directory.

Usage: click-buildtool prefix

Options:
  -h, --help                 Print this message and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
	exit 0;;
    *)
	prefix_usage;;
    esac
    done
    echo $prefix
}


################
# MAIN PROGRAM #
################

if test $# = 0; then
    # force usage message
    set crapfunc
fi

while [ x"$1" != x ]; do
case $1 in
  --vers|--versi|--versio|--version)
     cat <<'EOF'
click-buildtool (Click) 1.2.3
Copyright (c) 2000-2001 Massachusetts Institute of Technology
Copyright (c) 2000-2004 Mazu Networks, Inc.
Copyright (c) 2001-2003 International Computer Science Institute
Copyright (c) 2004 Regents of the University of California
This is free software; see the source for copying conditions.
There is NO warranty, not even for merchantability or fitness for a
particular purpose.
EOF
     exit 0;;
  -V|--verb|--verbo|--verbos|--verbose)
     verbose=1; shift 1;;
  -h|--h|--he|--hel|--help)
     cat <<'EOF' 1>&2
'Click-buildtool' is a set of tools used when building Click. For information
on a particular tool, run 'click-buildtool TOOLNAME --help'.

Usage: click-buildtool elem2make [-V] [-p PREFIX] < [ELEMENTS]
   or: click-buildtool elem2export [-V] [-p PREFIX] < [ELEMENTS]
   or: click-buildtool elem2package [-V] [-p PREFIX] PACKAGENAME < [ELEMENTS]
   or: click-buildtool findelem [-a] [-V] [-p PREFIX] < [FILES AND DIRECTORIES]
   or: click-buildtool prefix
   or: click-buildtool provides [REQS]
   or: click-buildtool quietlink

Options:
  -V, --verbose            Print more information.
  -h, --help               Print this message and exit.
      --version            Print version number and exit.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
     exit 0;;
  findelem)
     shift 1; findelem "$@"; exit 0;;
  elem2make)
     elem2="make"; shift 1; elem2make "$@"; exit 0;;
  elem2export)
     elem2="export"; shift 1; elem2xxx "$@"; exit 0;;
  elem2package)
     elem2="package"; shift 1; elem2xxx "$@"; exit 0;;
  findpackage)
     shift 1; findpackage "$@"; exit 0;;
  prefix)
     shift 1; prefix "$@"; exit 0;;
  provides)
     shift 1; provides "$@"; exit 0;;
  quietlink)
     shift 1; quietlink "$@"; exit 0;;
  *)
     echo "Usage: click-buildtool TOOLNAME [ARGUMENTS]
Try 'click-buildtool --help' for more information." 1>&2
     exit 1;;
esac
done
