#!/usr/bin/perl 
# run-grid-node
# Douglas S. J. De Couto

# $Id: run-grid-node,v 1.8 2000/08/06 03:00:50 decouto Exp $

# usage: run-grid-node <ip-addr> [-no-gw -debug]

# assume we run in <clickdir>/conf XXX

$click = "../userlevel/click";
$click_debug = "cat";
$click_config_name = "../conf/grid3.click";


$grid_channel = "5";

$CONTROL_PORT = "7777";
$CONTROL_RO = "false";

$GRID_GW = "18.26.7.1";
$GRID_NETMASK = "255.255.255.0";
$GRID_NET_HEX = "16/121a07"; # 18.26.7.*
$NBR_TIMEOUT = "2000"; # msecs
$HELLO_PERIOD = "500"; # msecs
$HELLO_JITTER = "100"; # msecs
$LR_PERIOD = "1300"; # msecs
$LR_JITTER = "300"; # msecs
$GRID_ETH_PROTO = "12/7FFF";
$GRID_NBR_ENCAP_PROTO = "15/03";

sub ip_to_hex {
    ($a, $b, $c, $d) = @_[0] =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/;
    return sprintf("%02x%02x%02x%02x", $a, $b, $c, $d);
}
	


if (@ARGV < 2) { 
    print stderr "usage: $0 <ip-addr> <interface> [no-gw]\n";
    exit 1;
}

$system_type = `uname`;
if (!($system_type =~ /Linux/ || 
      $system_type =~ /FreeBSD/)) {
    print stderr "This system is not supported\n";
    exit 1;
}

$do_cleanup = 1;
$grid_addr = $ARGV[0];
$grid_if = $ARGV[1];
$grid_gw = $GRID_GW;

$i = 0;
for ($i = 2; $i < @ARGV; $i++) {
    if ($ARGV[$i] eq "-debug") {
	$click = $click_debug;
	$CONTROL_RO = "false";
	print "Using DEBUG command\n";
	print "ControlSocket is write-enabled\n";
    }
    if ($ARGV[$i] eq "-no-gw") {
	$grid_gw = "0.0.0.0";
    }
    if ($ARGV[$i] eq "-no-cleanup") {
	$do_cleanup = 0;
    }
}

print "Running Grid with address $grid_addr on interface $grid_if, ad-hoc channel $grid_channel.\n";
if ($grid_gw != "0.0.0.0") {
    print "Using Grid gateway ", $grid_gw, "\n";
}
else {
    print "NOT using Grid gateway\n";
}

# get MAC address and other net info for restoring after click finishes

$ifconfig_out = `ifconfig $grid_if`;
$hw_addr = "";
$old_ip = "";
$old_netmask = "";
$old_bcast = "";
$old_gw = "";
$tun_dev_type = "";

if ($system_type =~ /Linux/) {
    if(!($ifconfig_out =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)){
	print "Unable to get MAC address";
	exit 1;
    }
    else {
	$hw_addr = $1;
    }
    if(!($ifconfig_out =~ /inet addr:(\d+.\d+.\d+.\d+)/)){
	print "Unable to get old IP address\n";
    }
    else {
	$old_ip_addr = $1;
    }
    if(!($ifconfig_out =~ /Mask:(\d+.\d+.\d+.\d+)/)){
	print "Unable to get old netmask\n";
    }
    else {
	$old_netmask = $1;
    }
    if(!($ifconfig_out =~ /Bcast:(\d+.\d+.\d+.\d+)/)){
	print "Unable to get old broadcast address\n";
    }
    else {
	$old_bcast = $1;
    }

    $route_info = `route -n`;
    if(!($route_info =~ /\n0.0.0.0\s+(\d+.\d+.\d+.\d+)/)){
	print "Unable to get old gateway\n";
    }
    else {
	$old_gw = $1;
    }

    $tun_dev = "tap";
}
elsif ($system_type =~ /FreeBSD/) {
    if(!($ifconfig_out =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)){
	print "Unable to get MAC address\n";
	exit 1;
    }
    $hw_addr = $1;
    if(!($ifconfig_out =~ /\n\s+inet (\d+.\d+.\d+.\d+)/)){
	print "Unable to get old IP address\n";
    }
    else {
	$old_ip_addr = $1;
    }
    if(!($ifconfig_out =~ /netmask (0x[0-9a-fA-F]{8})/)){
	print "Unable to get old netmask\n";
    }
    else {
	$old_netmask = $1;
    }
    if(!($ifconfig_out =~ /broadcast (\d+.\d+.\d+.\d+)/)){
	print "Unable to get old broadcast address\n";
    }
    else {
	$old_bcast = $1;
    }

    $route_info = `route -n get default`;
    if(!($route_info =~ /\n\s+gateway: (\d+.\d+.\d+.\d+)/)){
	print "Unable to get old gateway\n";
    }
    else {
	$old_gw = $1;
    }

    $tun_dev = "tun";
}
else {
    print stderr "This system is not supported\n";
    exit 1;
}

# turn off routing etc. for grid interface
# optionally setup default gw

if ($system_type =~ /Linux/) {
    # remove all routes through the grid interface, and make sure it is up
    system "ifconfig $grid_if down";
    system "ifconfig $grid_if 0";

    # set the adapter to ad-hoc mode
    system "iwconfig $grid_if mode ad-hoc channel $grid_channel";
}
elsif ($system_type =~ /FreeBSD/) {
    # remove all routes through the grid interface, and make sure it is up
    # assume the default route was the one through the adapter! XXX
    system "route -n delete default";
    system "ifconfig $grid_if 0";

    # set the adapter to ad-hoc mode
    system "wicontrol -i $grid_if -p 3";
    system "wicontrol -i $grid_if -f $grid_channel";
}
else {
    print stderr "This system is not supported\n";
    exit 1;
}


# fire up click, substituting appropriate values into the config file,
# and piping it into click stdin.

open(click_config_file, $click_config_name) || die "can't open click configuration ", $click_config_name, "\n";

$grid_addr_hex = ip_to_hex($grid_addr);

open(P, "| $click");
while(<click_config_file>) {

    s/CONTROL_PORT/$CONTROL_PORT/;
    s/CONTROL_RO/$CONTROL_RO/;
    s/GRID_NETMASK/$GRID_NETMASK/;
    s/GRID_NET_HEX/$GRID_NET_HEX/;
    s/NBR_TIMEOUT/$NBR_TIMEOUT/;
    s/HELLO_PERIOD/$HELLO_PERIOD/;
    s/HELLO_JITTER/$HELLO_JITTER/;
    s/LR_PERIOD/$LR_PERIOD/;
    s/LR_JITTER/$LR_JITTER/;
    s/GRID_ETH_PROTO/$GRID_ETH_PROTO/;
    s/GRID_NBR_ENCAP_PROTO/$GRID_NBR_ENCAP_PROTO/;
    s/GRID_GW/$grid_gw/;
    s/GRID_IP/$grid_addr/;
    s/GRID_HEX_IP/$grid_addr_hex/;
    s/NET_DEVICE/$grid_if/;
    s/MAC_ADDR/$hw_addr/;
    s/TUN_DEVICE_PREFIX/$tun_dev/;
    
    print P $_;
}
close P;
close click_config_file;


if ($do_cleanup) {
    if ($system_type =~ /Linux/) {
	system "ifconfig $grid_if $old_ip_addr netmask $old_netmask broadcast $old_bcast";
	system "iwconfig $grid_if mode managed";	

        if ($grid_gw != "0.0.0.0") {
	    system "route add default gw $old_gw";
	}
    }
    elsif ($system_type =~ /FreeBSD/) {
	system "ifconfig $grid_if $old_ip_addr netmask $old_netmask broadcast $old_bcast";
	system "wicontrol -i $grid_if -p 1";
	if ($grid_gw != "0.0.0.0") {
	    system "route delete default";
	    system "route add default $old_gw";
	}

    }
    else {
	print stderr "This system is not supported\n";
	exit 1;
    }
}











