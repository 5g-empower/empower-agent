#!/usr/bin/perl 
# run-grid-node
# Douglas S. J. De Couto

# assume we run in <clickdir>/conf XXX

$| = 1;
$debug = 0;
$config_file = "";

$click = "/userlevel/click";
$click_debug = "cat";
$click_config_name = "/conf/grid.click";
$clickdir = ".."; # convention: clickdir doesn't end in `/', so all subdirs must start with `/'

$grid_channel = "5";
$grid_ssid = "grid";
$radio_type = "wavelan";

$CONTROL_PORT = "7777";
$CONTROL_RO = "false";

$HEADROOM = "64"; # sizeof(grid_hdr) + sizeof(grid_nbr_encap)
$NUM_HOPS = "10";
$POS_LAT = "0";
$POS_LON = "0";
$RANGE = "250";
$GRID_GW = "18.26.7.1";
$GRID_NETMASK = "255.255.255.0";
$GRID_NET_HEX = "121a07"; # 18.26.7.*
$NBR_TIMEOUT = "2000"; # msecs
$HELLO_PERIOD = "500"; # msecs
$HELLO_JITTER = "100"; # msecs
$LR_PERIOD = "1300"; # msecs
$LR_JITTER = "300"; # msecs
$GRID_ETH_PROTO = "7FFF";
$GRID_NBR_ENCAP_PROTO = "03";
$GRID_LOC_QUERY_PROTO = "04";
$GRID_LOC_REPLY_PROTO = "05";


sub ip_to_hex {
    ($a, $b, $c, $d) = @_[0] =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/;
    return sprintf("%02x%02x%02x%02x", $a, $b, $c, $d);
}
	
sub my_system {
    if ($debug) {
	print @_, "\n";
    }
    else {
	system @_;
    }
}

if (@ARGV < 2) { 
    print stderr "usage: $0 <ip-addr> <interface> [-debug -no-cleanup -no-gw  -pos <lat> <lon> -range <rng> -config <config-file>]\n";
    print stderr "usage: $0 -config <config-file\n";
    exit 1;
}

$system_type = `uname`;
if (!($system_type =~ /Linux/ || 
      $system_type =~ /FreeBSD/)) {
    print stderr "This system is not supported\n";
    exit 1;
}


$do_cleanup = 1;
$grid_addr = "0.0.0.0";
$grid_if = "lo";

if ($ARGV[0] eq "-config") {
    $config_file = $ARGV[1];
    print "Using config file $config_file\n";
    open(grid_config_file, "$config_file") || die "can't open config file ", $config_file, "\n";
    while(<grid_config_file>) {
	if (/GW=(\d+\.\d+\.\d+\.\d+)/) {
	    $GRID_GW = $1;
	}
	if (/IP=(\d+\.\d+\.\d+\.\d+)/) {
	    $grid_addr = $1;
	}
	# XXX doesn't handle numbers without a digit before the point, e.g. `.005'
	if (/LAT=(-?\d+\.?\d*|\.d+)/) {
	    $POS_LAT = $1;
	}
	if (/LON=(-?\d+\.?\d*|\.d+)/) {
	    $POS_LON = $1;
	    print ("XXX $POS_LON\n");
	}
	if (/IF=(\w+)/) {
	    $grid_if = $1;
	}
	if (/CLICKDIR=(.+)/) {
	    $clickdir = $1;
	    print "new click dir $clickdir\n";
	}
    }
    close grid_config_file;
}
else {
    $grid_addr = $ARGV[0];
    $grid_if = $ARGV[1];

    $i = 0;
    for ($i = 2; $i < @ARGV; $i++) {
	if ($ARGV[$i] eq "-debug") {
	    $debug = 1;
	    $click = $click_debug;
	    $CONTROL_RO = "false";
	    print "Using DEBUG command\n";
	    print "ControlSocket is write-enabled\n";
	}
	if ($ARGV[$i] eq "-no-gw") {
	    $GRID_GW = "0.0.0.0";
	}
	if ($ARGV[$i] eq "-no-cleanup") {
	    $do_cleanup = 0;
	}
	if ($ARGV[$i] eq "-pos") {
	    if (@ARGV - $i < 3) {
		print "must specify position as `lat lon'\n";
		exit 1;
	    }
	    $i++;
	    $POS_LAT = $ARGV[$i];
	    $i++;
	    $POS_LON = $ARGV[$i];
	}
	if ($ARGV[$i] eq "-range") {
	    if (@ARGV - $i < 2) {
		print "must specify range\n";
		exit 1;
	    }
	    $i++;
	    $RANGE = $ARGV[$i];
	}
    }
}

if (-e "/proc/aironet/$grid_if") {
    $radio_type = "aironet";
}

if (!($grid_addr =~ /18.26.7.\d+/)) {
    print "Bad Grid address `$grid_addr'; must be 18.26.7.<host>\n";
    exit 1;
}




print "Running Grid with address $grid_addr on interface $grid_if ($radio_type), ad-hoc channel $grid_channel.\n";
if ($GRID_GW != "0.0.0.0") {
    print "Using Grid gateway ", $GRID_GW, "\n";
}
else {
    print "NOT using Grid gateway\n";
}

# get MAC address and other net info for restoring after click finishes

$ifconfig_out = `/sbin/ifconfig $grid_if`;
$hw_addr = "";
$old_ip = "";
$old_netmask = "";
$old_bcast = "";
$old_gw = "";

if ($system_type =~ /Linux/) {
    if(!($ifconfig_out =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)){
	print "Unable to get MAC address\n";
	exit 1;
    }
    else {
	$hw_addr = $1;
    }
    if(!($ifconfig_out =~ /inet addr:(\d+.\d+.\d+.\d+)/)){
	print "Unable to get old IP address\n";
    }
    else {
	$old_ip_addr = $1;
    }
    if(!($ifconfig_out =~ /Mask:(\d+.\d+.\d+.\d+)/)){
	print "Unable to get old netmask\n";
    }
    else {
	$old_netmask = $1;
    }
    if(!($ifconfig_out =~ /Bcast:(\d+.\d+.\d+.\d+)/)){
	print "Unable to get old broadcast address\n";
    }
    else {
	$old_bcast = $1;
    }

    $route_info = `/sbin/route -n`;
    if(!($route_info =~ /\n0.0.0.0\s+(\d+.\d+.\d+.\d+)/)){
	print "Unable to get old gateway\n";
    }
    else {
	$old_gw = $1;
    }
}
elsif ($system_type =~ /FreeBSD/) {
    if(!($ifconfig_out =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)){
	print "Unable to get MAC address\n";
	exit 1;
    }
    $hw_addr = $1;
    if(!($ifconfig_out =~ /\n\s+inet (\d+.\d+.\d+.\d+)/)){
	print "Unable to get old IP address\n";
    }
    else {
	$old_ip_addr = $1;
    }
    if(!($ifconfig_out =~ /netmask (0x[0-9a-fA-F]{8})/)){
	print "Unable to get old netmask\n";
    }
    else {
	$old_netmask = $1;
    }
    if(!($ifconfig_out =~ /broadcast (\d+.\d+.\d+.\d+)/)){
	print "Unable to get old broadcast address\n";
    }
    else {
	$old_bcast = $1;
    }

    $route_info = `/sbin/route -n get default`;
    if(!($route_info =~ /\n\s+gateway: (\d+.\d+.\d+.\d+)/)){
	print "Unable to get old gateway\n";
    }
    else {
	$old_gw = $1;
    }
}
else {
    print stderr "This system is not supported\n";
    exit 1;
}

# turn off routing etc. for grid interface
# optionally setup default gw

if ($system_type =~ /Linux/) {
    # remove all routes through the grid interface, and make sure it is up
    my_system "/sbin/ifconfig $grid_if down";
    my_system "/sbin/ifconfig $grid_if 0";

    # set the adapter to ad-hoc mode
    if ($radio_type eq "wavelan") {
	my_system "iwconfig $grid_if mode ad-hoc channel $grid_channel";
    }
    elsif ($radio_type eq "aironet") {
	my_system "echo \"Mode: adhoc\" > /proc/aironet/$grid_if/Config";
	my_system "echo \"Channel: $grid_channel\" > /proc/aironet/$grid_if/Config";
	my_system "echo \"$grid_ssid\" > /proc/aironet/$grid_if/SSID";
    }
    else {
	print stderr "Radio type $radio_type is not supported\n";
	exit 1;
    }
    
    # decrease mtu on the kerneltap so we don't get packets too big to encapsulate.  
    # this is hacky, maybe it should be in the kerneltap code with the ifconfig/route calls.  
    # but i forget why those are in there at all...
    my_system "/sbin/ifconfig tap0 mtu 1400"
}
elsif ($system_type =~ /FreeBSD/) {
    # remove all routes through the grid interface, and make sure it is up
    # assume the default route was the one through the adapter! XXX
    my_system "/sbin/route -n delete default";
    my_system "/sbin/ifconfig $grid_if 0";

    # set the adapter to ad-hoc mode
    if ($radio_type eq "wavelan") {
	my_system "wicontrol -i $grid_if -p 3";
	my_system "wicontrol -i $grid_if -f $grid_channel";
    }
    elsif ($radio_type eq "aironet") {
	print stderr "Radio type $radio_type is not supported yet on freebsd\n";
	exit 1;
    }
    else {
	print stderr "Radio type $radio_type is not supported\n";
	exit 1;
    }

    print "WARNING: not decreasing tun MTU.  Transfers with big packets will fail.  Fix this script!\n"
}
else {
    print stderr "This system is not supported\n";
    exit 1;
}


# fire up click, substituting appropriate values into the config file,
# and piping it into click stdin.

print "XXX clickdir $clickdir\n";
open(click_config_file, "$clickdir$click_config_name") || die "can't open click configuration ", "$clickdir$click_config_name", "\n";

$grid_addr_hex = ip_to_hex($grid_addr);


$new_click = "$clickdir$click";
if ($debug) {
    $new_click = $click_debug;
}

print "XXX newclick $new_click\n";

open(P, "| $new_click");
while(<click_config_file>) {

    s/LOC_DB/$LOC_DB/;
    s/HEADROOM/$HEADROOM/;
    s/NUM_HOPS/$NUM_HOPS/;
    s/CONTROL_PORT/$CONTROL_PORT/;
    s/CONTROL_RO/$CONTROL_RO/;
    s/RANGE/$RANGE/;
    s/POS_LAT/$POS_LAT/;
    s/POS_LON/$POS_LON/;
    s/GRID_NETMASK/$GRID_NETMASK/;
    s/GRID_NET_HEX/$GRID_NET_HEX/;
    s/NBR_TIMEOUT/$NBR_TIMEOUT/;
    s/HELLO_PERIOD/$HELLO_PERIOD/;
    s/HELLO_JITTER/$HELLO_JITTER/;
    s/LR_PERIOD/$LR_PERIOD/;
    s/LR_JITTER/$LR_JITTER/;
    s/GRID_ETH_PROTO/$GRID_ETH_PROTO/;
    s/GRID_NBR_ENCAP_PROTO/$GRID_NBR_ENCAP_PROTO/;
    s/GRID_LOC_QUERY_PROTO/$GRID_LOC_QUERY_PROTO/;
    s/GRID_LOC_REPLY_PROTO/$GRID_LOC_REPLY_PROTO/;
    s/GRID_GW/$GRID_GW/;
    s/GRID_IP/$grid_addr/;
    s/GRID_HEX_IP/$grid_addr_hex/;
    s/NET_DEVICE/$grid_if/;
    s/MAC_ADDR/$hw_addr/;
    
    print P $_;
}
close P;
close click_config_file;


print "Cleaning up\n";

if ($do_cleanup) {
    if ($system_type =~ /Linux/) {
	my_system "/sbin/ifconfig $grid_if $old_ip_addr netmask $old_netmask broadcast $old_bcast";
	if ($radio_type eq "wavelan") {
	    my_system "iwconfig $grid_if mode managed";	
	}
	elsif ($radio_type eq "aironet") {
	    my_system "echo \"Mode: ESS\" > /proc/aironet/$grid_if/Config\n";
	    my_system "echo \"Chaos\" > /proc/aironet/$grid_if/SSID";
	}
	else {
	    print stderr "Radio type $radio_type is not supported\n";
	    exit 1;
	}

        if ($grid_gw != "0.0.0.0") {
	    my_system "/sbin/route add default gw $old_gw";
	}
    }
    elsif ($system_type =~ /FreeBSD/) {
	my_system "/sbin/ifconfig $grid_if $old_ip_addr netmask $old_netmask broadcast $old_bcast";
	if ($radio_type eq "wavelan") {
	    my_system "wicontrol -i $grid_if -p 1";
	}
	elsif ($radio_type eq "aironet") {
	    print stderr "Radio type $radio_type is not supported yet on freebsd\n";
	    exit 1;
	}
	else {
	    print stderr "Radio type $radio_type is not supported\n";
	    exit 1;
	}

	if ($grid_gw != "0.0.0.0") {
	    my_system "/sbin/route delete default";
	    my_system "/sbin/route add default $old_gw";
	}

    }
    else {
	print stderr "This system is not supported\n";
	exit 1;
    }
}























