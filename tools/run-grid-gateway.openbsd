#!/usr/bin/perl 
# run-grid-gateway.openbsd
# Douglas S. J. De Couto
# stolen from run-grid-node

# assume $CLICKDIR is set, or that we run in the directory above this
# script.

# other problems: assumes 24 bit netmasks; confusing parameter naming

$| = 1;
$debug = 0;

$clickdir = $ENV{CLICKDIR};
if ($clickdir eq "") {
    $clickdir = ".";
}

$click = "$clickdir/userlevel/click";
$click_debug = "cat";
$click_config_name = "$clickdir/conf/grid-gateway.click";


$grid_channel = "5";
$grid_ssid = "grid";

$CONTROL_PORT = "7777";
$CONTROL_RO = "false";

$HEADROOM = "64"; # sizeof(grid_hdr) + sizeof(grid_nbr_encap)
$NUM_HOPS = "1";
$POS_LAT = "0";
$POS_LON = "0";
$RANGE = "250";
$GRID_GW = "18.26.7.1";
$GRID_NETMASK = "255.255.255.0";
$GRID_NET = "18.26.7.0";
$GRID_NET_HEX = net_to_hex($GRID_NET);
$NBR_TIMEOUT = "3200"; # msecs
$HELLO_PERIOD = "500"; # msecs
$HELLO_JITTER = "100"; # msecs
$LR_PERIOD = "1300"; # msecs
$LR_JITTER = "300"; # msecs
$GRID_ETH_PROTO = "7FFF";
$GRID_NBR_ENCAP_PROTO = "03";
$GRID_LOC_QUERY_PROTO = "04";
$GRID_LOC_REPLY_PROTO = "05";


# gateway stuff...

sub ip_to_hex {
    ($a, $b, $c, $d) = @_[0] =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/;
    return sprintf("%02x%02x%02x%02x", $a, $b, $c, $d);
}
	
sub net_to_hex {
    # expects 3 digits: a.b.c
    ($a, $b, $c) = @_[0] =~ /(\d+)\.(\d+)\.(\d+)/;
    return sprintf("%02x%02x%02x", $a, $b, $c);
}

sub my_system {
    if ($debug) {
	print @_, "\n";
    }
    else {
	system @_;
    }
}

if (@ARGV < 2) { 
    print stderr "usage: $0 <grid-interface> <lan-interface> [-debug -no-cleanup  -pos <lat> <lon> -range <rng>]\n";
    exit 1;
}

$system_type = `uname`;
if (!($system_type =~ /OpenBSD/)) {
    print stderr "Only OpenBSD systems are supported by this script\n";
    exit 1;
}

$do_cleanup = 1;
$grid_addr = $GRID_GW; # !!!!
$grid_if = $ARGV[0];
$grid_gw = $GRID_GW;

$lan_if = $ARGV[1];

if (!($grid_if =~ /an\d+/)) {
    print stderr "Only Aironet cards (anN devices) are supported by this script\n";
    exit 1;
}



$i = 0;
for ($i = 2; $i < @ARGV; $i++) {
    if ($ARGV[$i] eq "-debug") {
	$debug = 1;
	$click = $click_debug;
	$CONTROL_RO = "false";
	print "Using DEBUG command\n";
	print "ControlSocket is write-enabled\n";
    }
    if ($ARGV[$i] eq "-no-cleanup") {
	$do_cleanup = 0;
    }
    if ($ARGV[$i] eq "-pos") {
	if (@ARGV - $i < 3) {
	    print "must specify position as `lat lon'\n";
	    exit 1;
	}
	$i++;
	$POS_LAT = $ARGV[$i];
	$i++;
	$POS_LON = $ARGV[$i];
    }
    if ($ARGV[$i] eq "-range") {
	if (@ARGV - $i < 2) {
	    print "must specify range\n";
	    exit 1;
	}
	$i++;
	$RANGE = $ARGV[$i];
    }
}


if (!($grid_addr =~ /18.26.7.\d+/)) {
    print "Bad Grid address `$grid_addr'; must be 18.26.7.<host>\n";
    exit 1;
}

print "Running Grid gateway\n\tGrid address: $grid_addr\n\tGrid interface: $grid_if\n\tGrid ad-hoc channel: $grid_channel\n\tGrid SSID: $grid_ssid\n";

# get MAC address and other net info for figuring out gateway info and
# restoring setting after click ends.

$grid_hw_addr = "";
$old_ip = "";
$old_netmask = "";
$old_bcast = "";
$old_grid_dev_gw = "";
$old_grid_dev_net = "";
$tun_dev_type = "";

$lan_addr = "";
$lan_hw_addr = "";
$old_lan_netmask = "";
$old_lan_bcast = "";
$lan_gw = "";
$lan_net = "";


if (!(`netstat -I $grid_if -n` =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)) {
	print "Unable to get Grid device MAC address\n";
	exit 1;
}
else {
	$grid_hw_addr = $1;
	print "Grid device MAC address ($grid_if) is $grid_hw_addr\n";
}

# get LAN device params for routing
$ifconfig_lan_out = `ifconfig $lan_if`;
if (!(`netstat -I $lan_if -n` =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)) {
	print "Unable to get LAN device MAC address\n";
	exit 1; # we really need to know that...
}
else {
	$lan_hw_addr = $1;
	print "LAN device MAC address ($lan_if) is $lan_hw_addr\n";
}
if (!($ifconfig_lan_out =~ /\n\s+inet (\d+.\d+.\d+.\d+)/)) {
	print "Unable to get LAN device IP address\n";
	exit 1;
}
else {
	$lan_addr = $1;
	if (!($lan_addr =~ /(\d+.\d+.\d+).\d+/)) {
	    print "Unable to get LAN device net address\n";
	    exit 1;
	}
	$lan_net = "$1"; # keep as only the first 3 digits
}
if (!($ifconfig_lan_out =~ /netmask (0x[0-9a-fA-f]{8})/)) {
	print "Unable to get LAN device netmask\n";
}
else {
	$old_lan_netmask = $1;
}
if (!($ifconfig_lan_out =~ /broadcast (\d+.\d+.\d+.\d+)/)) {
	print "Unable to get LAN device broadcast address\n";
}
else {
	$old_lan_bcast = $1;
}

# only know how to extract one default route -- but there may be
# multiple ``default'' routes!.
$route_info = `route -n get default`;
if (!($route_info =~ /\n\s+gateway: ($lan_net.\d+)/)) {
	print "Unable to get gateway\n";
	exit 1;
}
else {
	$lan_gw = $1;
}

print("Remembering these wired network parameters:\n");
print("\tIP address: $lan_addr\n");
print("\tIP net address: $lan_net\n");
print("\tnetmask: $old_lan_netmask\n");
print("\tbroadcast: $old_lan_bcast\n");
print("\tgateway: $lan_gw\n");

$tun_dev = "tun";

# make sure grid interface is up
print("Deleting old default route\n");
my_system "route -n delete default $lan_gw";
printf("Bringing up Grid interface\n");
my_system "ifconfig $grid_if up";

# assume aironet device
my_system "ancontrol $grid_if -o 0"; # set the adapter to ad-hoc mode
my_system "ancontrol $grid_if -c $grid_channel"; # set the channel
my_system "ancontrol $grid_if -n $grid_ssid"; # set the SSID

# setup appropriate MTU
# XXX makes assumptions about which tun is assigned to what!
my_system "ifconfig tun0 mtu 1500"; # interface to wired ethernet
my_system "ifconfig tun1 mtu 1350"; # interface to grid net


print "WARNING: assuming 24 bit netmask for wired lan.  Fix this script!\n";

# remove default route
my_system, "route -n delete default";
# make sure LAN interface is up
my_system "ifconfig $lan_if 0";

print("firing up click...\n");

# fire up click, substituting appropriate values into the config file,
# and piping it into click stdin.

open(click_config_file, $click_config_name) || die "can't open click configuration ", $click_config_name, "\n";

$grid_addr_hex = ip_to_hex($grid_addr);
$gw_addr_hex = ip_to_hex($lan_addr);
$gw_net_hex = net_to_hex($lan_net);

open(P, "| $click");
while(<click_config_file>) {

    s/LOC_DB/$LOC_DB/;
    s/HEADROOM/$HEADROOM/;
    s/NUM_HOPS/$NUM_HOPS/;
    s/CONTROL_PORT/$CONTROL_PORT/;
    s/CONTROL_RO/$CONTROL_RO/;
    s/RANGE/$RANGE/;
    s/POS_LAT/$POS_LAT/;
    s/POS_LON/$POS_LON/;
    s/GRID_NETMASK/$GRID_NETMASK/;
    s/GRID_NET_HEX/$GRID_NET_HEX/;
    s/NBR_TIMEOUT/$NBR_TIMEOUT/;
    s/HELLO_PERIOD/$HELLO_PERIOD/;
    s/HELLO_JITTER/$HELLO_JITTER/;
    s/LR_PERIOD/$LR_PERIOD/;
    s/LR_JITTER/$LR_JITTER/;
    s/GRID_ETH_PROTO/$GRID_ETH_PROTO/;
    s/GRID_NBR_ENCAP_PROTO/$GRID_NBR_ENCAP_PROTO/;
    s/GRID_LOC_QUERY_PROTO/$GRID_LOC_QUERY_PROTO/;
    s/GRID_LOC_REPLY_PROTO/$GRID_LOC_REPLY_PROTO/;
    s/GRID_GW/$grid_gw/;
    s/GRID_IP/$grid_addr/;
    s/GRID_HEX_IP/$grid_addr_hex/;
    s/WI_NET_DEVICE/$grid_if/;
    s/GRID_MAC_ADDR/$grid_hw_addr/;

    # gateway stuff
    s/GW_IP/$lan_addr/;
#    s/GW_NETMASK/$old_lan_netmask/;
    s/GW_NETMASK/255.255.255.0/;
    s/GW_HEX_IP/$gw_addr_hex/;
    s/GW_HEX_NET/$gw_net_hex/;
    s/GW_REAL_IP/$lan_gw/;
    s/GW_NET_DEVICE/$lan_if/;
    s/GW_MAC_ADDR/$lan_hw_addr/;
    s/GRID_NET/$GRID_NET/;

    print P $_;
}
close P;
close click_config_file;


if ($do_cleanup) {
    print "Cleaning up...\n";
    my_system "ifconfig $grid_if down";
    # my_system "wicontrol -i $grid_if -p 1";
    my_system "ifconfig $lan_if $lan_addr netmask $old_lan_netmask broadcast $old_lan_bcast";
    my_system "route delete default";
    my_system "route add default $lan_gw";
}











