#!/usr/bin/perl 
# run-grid-node.openbsd
# Douglas S. J. De Couto

$| = 1;

sub sigint_handler {
    print stderr "run_grid:  got SIGINT\n";
    if ($DO_CLEANUP) {
	do_cleanup ();
    }
    exit 0;
}

$SIG{INT} = \&sigint_handler;

$GRID_DIR = $ENV{GRID_DIR};
if ($GRID_DIR eq "") {
    $GRID_DIR = ".";
}

$GRID_CONFIG_FILE = $ENV{GRID_CONFIG};
if ($GRID_CONFIG_FILE eq "") {
    $GRID_CONFIG_FILE = "$GRID_DIR/grid-config";
}

$CLICK = $ENV{CLICK};
if ($CLICK eq "") {
    $CLICK = "$GRID_DIR/click";
}

$DEBUG = 0;
$DO_CLEANUP = 1;

$CLICK_DEBUG = "cat";

$GRID_CHANNEL = "5";
$GRID_SSID = "grid";

$CONTROL_PORT = "7777";
$CONTROL_RO = "false";

$HEADROOM = "64"; # sizeof(grid_hdr) + sizeof(grid_nbr_encap)
$NUM_HOPS = "100"; # always run DSDV -- assumer less than 100 hops in net ;>

$RANGE = "-1"; # don't filter
$GRID_GW = "";

$GRID_NETMASK = "255.255.255.0";
$GRID_NET = "18.26.7.0";
$GRID_NET_HEX = "121a07"; # 18.26.7.*

$NBR_TIMEOUT = "3200"; # msecs
$HELLO_PERIOD = "500"; # msecs
$HELLO_JITTER = "100"; # msecs
$LR_PERIOD = "1300"; # msecs
$LR_JITTER = "300"; # msecs

$GRID_ETH_PROTO = "7FFF";
$GRID_NBR_ENCAP_PROTO = "03";
$GRID_LOC_QUERY_PROTO = "04";
$GRID_LOC_REPLY_PROTO = "05";
$GRID_LR_HELLO_PROTO = "02";

sub ip_to_hex {
    ($a, $b, $c, $d) = @_[0] =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/;
    return sprintf("%02x%02x%02x%02x", $a, $b, $c, $d);
}
	
sub my_system {
    if ($DEBUG) {
	print stderr "run_grid:  ", @_, "\n";
 	system @_;   
    } else {
	system @_;
    }
}

$SYSTEM_TYPE = `uname`;

#if ($ARGV[0] eq "-config") {
#    if (@ARGV < 2) {
#	print "usage: $0 -config <config-file>\n";
#	exit 1;
#    }
#
#    $GRID_CONFIG_FILE = $ARGV[1];
#}

print "run_grid:  using config file $GRID_CONFIG_FILE\n";
open(grid_config, "$GRID_CONFIG_FILE") || die "run_grid: can't open config file ", $GRID_CONFIG_FILE, "\n";

print "run_grid:  system type is $SYSTEM_TYPE\n";

$IS_GATEWAY = 0;

while (<grid_config>) {
    # print;
    if (/^\#/) {
	continue;
    }

    if (/IDENTIFIER=(.+)/) {
	$IDENTIFIER = $1;
    }

    if (/IS_GATEWAY=(\d)/) {
	$IS_GATEWAY = $1;
		
	if ($IS_GATEWAY) {
	    print "run_grid:  running as gateway\n";
	} else {
	    print "run_grid:  not running as gateway\n";
	}
    }

    if (/GRID_GW/) {
	print "run_grid:  GRID_GW is deprecated\n";
	exit -1;
    }
	
    if (/GW=(\d+\.\d+\.\d+\.\d+)/) {
	$GRID_GW = $1;
	
	print "run_grid:  setting gateway to $GRID_GW\n";
    }
    
    if (/GW_IP=(\d+\.\d+\.\d+\.\d+)/) {
	$GW_IP = $1;
    }
    
    if (/GRID_IP=(\d+\.\d+\.\d+\.\d+)/) {
	$GRID_IP = $1;
    }

#    if (/ROUTED_IP=(\d+\.\d+\.\d+\.\d+)/) {
#	$ROUTED_IP = $1;
#    }
    
    if (/LOC_AWARE=(-?\d+\.?\d*|\.d+)/) {
	$LOC_AWARE = $1;
    }

    # XXX doesn't handle numbers without a digit before the point, e.g. `.005'
    if (/LAT=(-?\d+\.?\d*|\.d+)/) {
	$POS_LAT = $1;
    }

    if (/LON=(-?\d+\.?\d*|\.d+)/) {
	$POS_LON = $1;
#	print ("XXX $POS_LON\n");
    }

    if (/GRID_IF=(\w+)/) {
	$GRID_IF = $1;
    }

    if (/GW_IF=(\w+)/) {
	$GW_IF = $1;
    }

    if (/GRID_CHANNEL=(\d+)/) {
	$GRID_CHANNEL = $1;
    }
    
    if (/GRID_SSID=(\w+)/) {
	$GRID_SSID = $1;
    }

    if (/RADIO_TYPE=(\w+)/) {
	$RADIO_TYPE = $1;
    }
}

close grid_config;


print "run_grid:  IDENTIFIER = $IDENTIFIER\n";
      
print "run_grid:  GRID_IP = $GRID_IP\n";
print "run_grid:  GRID_IF = $GRID_IF\n";
print "run_grid:  RADIO_TYPE = $RADIO_TYPE\n";
      
print "run_grid:  IS_GATEWAY = $IS_GATEWAY\n";
# print "run_grid:  GRID_GW = $GRID_GW\n";
print "run_grid:  GW_IF = $GW_IF\n";
print "run_grid:  GW_IP = $GW_IP\n";
      
print "run_grid:  LOC_AWARE = $LOC_AWARE\n";
print "run_grid:  POS_LAT = $POS_LAT\n";
print "run_grid:  POS_LON = $POS_LON\n";
      
print "run_grid:  GRID_CHANNEL = $GRID_CHANNEL\n";
print "run_grid:  GRID_SSID = $GRID_SSID\n";


# sanity checks

if (!defined $IDENTIFIER) {
    print "run_grid:  grid identifier not set!\n";
    exit -1;
}

if (!defined $GRID_IP) {
    print "run_grid:  grid IP (GRID_IP) not defined in configuration\n";
    exit -1;
}

if (!defined $IS_GATEWAY) {
    print "run_grid:  gateway-ness (IS_GATEWAY) not defined in configuration\n";
    exit -1;
}

if (!defined $GRID_IF) {
    print "run_grid:  grid interface (GRID_IF) not defined in configuration\n";
    exit -1;
}

if (!defined $LOC_AWARE) {
    print "run_grid:  location awareness (LOC_AWARE) not defined in configuration\n";
    exit -1;
}

if (!defined $RADIO_TYPE) {
    print "run_grid:  radio type (RADIO_TYPE) not defined in configuration\n";
    exit -1;
}

if ($IS_GATEWAY && (!defined $GW_IF || !defined $GW_IP)) {
    print "run_grid:  no IP for gateway interface\n";
    exit -1;
}

if ($

if (!$LOC_AWARE && (defined $POS_LAT || defined $POS_LON)) {
    print "run_grid:  can't set location for location-unaware node\n";
    exit -1;
}

if (!($GRID_IP =~ /18.26.7.\d+/)) {
    print "run_grid:  bad grid address `$GRID_IP'; must be in 18.26.7/24\n";
    exit -1;
}

print "run_grid:  running grid with IP $GRID_IP on interface $GRID_IF ($RADIO_TYPE);\n";
print "run_grid:     ad-hoc channel/SSID $GRID_CHANNEL/$GRID_SSID.\n";

# open click config, run click.

#if ($IS_GATEWAY) {
#    $CLICK_CONFIG = "grid-gateway.click";
#} else {	     
#    $CLICK_CONFIG = "grid.click";
#}

$CLICK_CONFIG = "grid.click";

if ($IS_GATEWAY) {
    open (click_config, "cpp -DCPP_IS_GATEWAY $CLICK_CONFIG |") || 
	"can't preprocess click configuration (cpp -DIS_GATEWAY $CLICK_CONFIG)\n";
} else {
    open (click_config, "cpp $CLICK_CONFIG |") || 
	"can't preprocess click configuration (cpp $CLICK_CONFIG)\n";
}

# system specific stuff here
setup_net_info();

$GRID_IP_HEX = ip_to_hex($GRID_IP);
if ($IS_GATEWAY) {
    $GW_NET_HEX = ip_to_hex($GW_NET);
    $GW_IP_HEX = ip_to_hex($GW_IP);
}

if ($DEBUG) {
    $CLICK = $CLICK_DEBUG;
}

open(P, "| $CLICK");
while(<click_config>) {

    s/LOC_DB/$LOC_DB/;
    s/HEADROOM/$HEADROOM/;
    s/NUM_HOPS/$NUM_HOPS/;
    s/CONTROL_PORT/$CONTROL_PORT/;
    s/CONTROL_RO/$CONTROL_RO/;
    s/RANGE/$RANGE/;
    s/POS_LAT/$POS_LAT/;
    s/POS_LON/$POS_LON/;
    s/GRID_NETMASK/$GRID_NETMASK/;
    s/GRID_NET_HEX/$GRID_NET_HEX/;
    s/NBR_TIMEOUT/$NBR_TIMEOUT/;
    s/HELLO_PERIOD/$HELLO_PERIOD/;
    s/HELLO_JITTER/$HELLO_JITTER/;
    s/LR_PERIOD/$LR_PERIOD/;
    s/LR_JITTER/$LR_JITTER/;
    s/GRID_ETH_PROTO/$GRID_ETH_PROTO/;
    s/GRID_NBR_ENCAP_PROTO/$GRID_NBR_ENCAP_PROTO/;
    s/GRID_LOC_QUERY_PROTO/$GRID_LOC_QUERY_PROTO/;
    s/GRID_LOC_REPLY_PROTO/$GRID_LOC_REPLY_PROTO/;
    s/GRID_LR_HELLO_PROTO/$GRID_LR_HELLO_PROTO/;
    s/GRID_GW/$GRID_GW/;
    s/GRID_IP/$GRID_IP/;
    s/GRID_HEX_IP/$GRID_IP_HEX/;
    s/WI_NET_DEVICE/$GRID_IF/;

    s/GRID_MAC_ADDR/$GRID_HW_ADDR/;

    s/GW_IP/$GW_IP/;
    s/GW_NETMASK/255.255.255.0/;
    s/GW_HEX_IP/$GW_IP_HEX/;
    s/GW_HEX_NET/$GW_NET_HEX/;
    s/GW_REAL_IP/$GW_GATEWAY/;
    s/GW_NET_DEVICE/$GW_IF/;
    s/GW_MAC_ADDR/$GW_HW_ADDR/;
    s/GRID_NET/$GRID_NET/;

    print P $_;
}

close P;
close click_config_file;

print stderr "run_grid:  click died.\n";

if ($DO_CLEANUP) {
    do_cleanup ();
}

exit 0;

sub setup_net_info {
    
# get MAC address and other net info required by click, and
# possibly for restoring original values after click finishes
    
    if ($SYSTEM_TYPE == 'OpenBSD') {
	
	$GRID_HW_ADDR = "";
	$GW_HW_ADDR = "";
	$GW_IP = "";
	$GW_GATEWAY = "";

	$GRID_IFCONFIG_OUT = `/sbin/ifconfig $GRID_IF`;

	if (!(`netstat -I $GRID_IF -n` =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)) {
	    print "run_grid:  unable to determine MAC address for grid interface $GRID_IF\n";
	    do_cleanup ();
	    exit -1;
	}
	
	$GRID_HW_ADDR = $1;

	$ROUTE_INFO = `route -n get default`;
	if (!($ROUTE_INFO =~ /\n\s+interface: (\S+)/)) {
	    print "run_grid:  unable to determine default interface\n";
#	    do_cleanup ();
	    exit -1;
	} else {
	    $DEFAULT_IF = $1;
	}
	
	if ($IS_GATEWAY) {
	    print "run_grid:  determining gateway-specific variables\n";
	    
	    if (!(`netstat -I $GW_IF -n` =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)) {
		print "run_grid:  unable to determine MAC address for gateway interface $GRID_IF\n";
#		do_cleanup ();
		exit -1;
	    } else {
		$GW_HW_ADDR = $1;
	    }

	    $GW_IFCONFIG_OUT = `/sbin/ifconfig $GW_IF`;
	    
	    if (!($GW_IFCONFIG_OUT =~ /\n\s+inet (\d+.\d+.\d+.\d+)/)) {
		print "run_grid:  unable to determine wired IP address\n";
#		do_cleanup ();
		exit -1;
	    } else {
		$GW_IP = $1;

		# "XXX" -- assuming netmask is 0xffffff00?
		# also below.

		if (!($GW_IP =~ /(\d+.\d+.\d+).\d+/)) {
		    print "run_grid:  unable to get wired net address\n";
#		    do_cleanup ();
		    exit -1;
		}
		$GW_NET = "$1"; # keep as only the first 3 digits
	    }
	    
	    print "run_grid:  decided wired net is $GW_NET/24\n";

	    $ROUTE_INFO = `route -n get default`;
	    if (!($ROUTE_INFO =~ /\n\s+gateway: ($GW_NET.\d+)/)) {
		print "run_grid:  unable to determine wired gateway\n";
#		do_cleanup ();
		exit -1;
	    } else {
		$GW_GATEWAY = $1;
	    }
	}

	print "run_grid:  GRID_HW_ADDR = $GRID_HW_ADDR\n";
	print "run_grid:  DEFAULT_IF = $DEFAULT_IF\n";
	
	if ($IS_GATEWAY) {
	    print "run_grid:  GW_HW_ADDR = $GW_HW_ADDR\n";
	    print "run_grid:  GW_IP = $GW_IP\n";
	    print "run_grid:  GW_GATEWAY = $GW_GATEWAY\n";
	}
	
# turn off routing etc. for grid interface
# optionally setup default gw
	
# remove all routes through the grid interface, and make sure it is up
	
	if ($DEFAULT_IF == $GRID_IF) {

# decouto: assume the default route was the one through the adapter!
# XXX [should be fixed by this if ()?  but untested.  this probably
# shouldn't matter if gateways are properly configured.]

	    my_system "/sbin/route -n delete default";
	}
	
	my_system "/sbin/ifconfig $GRID_IF 0";
		
# set the wireless adapter to ad-hoc mode
	my_system "ancontrol $GRID_IF -o 0";
	my_system "ancontrol $GRID_IF -c $GRID_CHANNEL";
	my_system "ancontrol $GRID_IF -n $GRID_SSID";
	
# set mtu to account for grid encapsulation
# XXX how do we know we get tun0? 
	
	my_system "ifconfig tun0 mtu 1350";

#	my_system "route -n delete default $lan_gw";
	
	if ($IS_GATEWAY) {
	    my_system "sysctl -w net.inet.ip.forwarding=1";
            my_system "ifconfig tun1 mtu 1350"; # interface to grid net
	}
	
    } elsif ($SYSTEM_TYPE == 'Linux') {
	
	# @ADD sysctl ipforwarding...

	$ifconfig_out = `/sbin/ifconfig $GRID_IF`;
	$grid_hw_addr = "";
	$old_ip = "";
	$old_netmask = "";
	$old_bcast = "";
	$old_grid_dev_gw = "";
	$old_grid_dev_net = "";
	$tun_dev_type = "";
	
	$lan_addr = "";
	$lan_hw_addr = "";
	$old_lan_netmask = "";
	$old_lan_bcast = "";
	$lan_gw = "";
	$lan_net = "";
	
	if (!($ifconfig_out =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)) {
	    print "Unable to get Grid device MAC address\n";
	    exit 1;
	}
	else {
	    $grid_hw_addr = $1;
	}
	if (!($ifconfig_out =~ /inet addr:(\d+.\d+.\d+.\d+)/)) {
	    print "Unable to get old Grid device IP address\n";
	}
	else {
	    $old_ip_addr = $1;
	    if (!($old_ip_addr =~ /(\d+.\d+.\d+).\d+/)) {
		print "Unable to get Grid device net address\n";
		exit 1;
	    }
	    $old_grid_dev_net = "$1"; # keep as only the first 3 digits
	}
	if (!($ifconfig_out =~ /Mask:(\d+.\d+.\d+.\d+)/)) {
	    print "Unable to get old Grid device netmask\n";
	}
	else {
	    $old_netmask = $1;
	}
	if (!($ifconfig_out =~ /Bcast:(\d+.\d+.\d+.\d+)/)) {
	    print "Unable to get old Grid device broadcast address\n";
	}
	else {
	    $old_bcast = $1;
	}
	
	# get LAN device params for routing
	$ifconfig_lan_out = `ifconfig $lan_if`;
	if (!($ifconfig_lan_out =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)) {
	    print "Unable to get LAN device MAC address\n";
	    exit 1; # we really need to know that...
	}
	else {
	    $lan_hw_addr = $1;
	}
	if (!($ifconfig_lan_out =~ /inet addr:(\d+.\d+.\d+.\d+)/)) {
	    print "Unable to get LAN device IP address\n";
	    exit 1;
	}
	else {
	    $lan_addr = $1;
	    if (!($lan_addr =~ /(\d+.\d+.\d+).\d+/)) {
		print "Unable to get LAN device net address\n";
		exit 1;
	    }
	    $lan_net = "$1"; # keep as only the first 3 digits
	}
	if (!($ifconfig_lan_out =~ /Mask:(\d+.\d+.\d+.\d+)/)) {
	    print "Unable to get LAN device netmask\n";
	}
	else {
	    $old_lan_netmask = $1;
	}
	if (!($ifconfig_lan_out =~ /Bcast:(\d+.\d+.\d+.\d+)/)) {
	    print "Unable to get LAN device broadcast address\n";
	}
	else {
	    $old_lan_bcast = $1;
	}

	$route_info = `route -n`;
	if (!($route_info =~ /\n0.0.0.0\s+($lan_net.\d+)/)) {
	    print "Unable to get LAN device gateway\n";
	    exit 1;
	}
	else {
	    $lan_gw = $1;
	}
	if (!($route_info =~ /\n0.0.0.0\s+($old_grid_dev_net.\d+)/)) {
	    print "Unable to get Grid device gateway\n";
	}
	else {
	    $old_grid_dev_gw = $1;
	}

	$tun_dev = "tap";


	# remove all routes through the grid interface, and make sure it is up
	my_system "ifconfig $grid_if down";
	my_system "ifconfig $grid_if 0";
	
	# set the adapter to ad-hoc mode
	if ($RADIO_TYPE eq "wavelan") {
	    my_system "iwconfig $grid_if mode ad-hoc channel $grid_channel";
	}
	elsif ($RADIO_TYPE eq "aironet") {
	    my_system "echo \"Mode: adhoc\" > /proc/aironet/$grid_if/Config";
	    my_system "echo \"Channel: $grid_channel\" > /proc/aironet/$grid_if/Config";
	    my_system "echo \"$grid_ssid\" > /proc/aironet/$grid_if/SSID";
	} else {
	    die "run_grid: radio type $RADIO_TYPE not supported\n";
	}


	# remove LAN device routes
	my_system "ifconfig $lan_if down";
	my_system "ifconfig $lan_if 0";

	# decrease mtu on the kerneltap so we don't get packets too big to encapsulate.  
	# this is hacky, maybe it should be in the kerneltap code with the ifconfig/route calls.  
	# but i forget why those are in there at all...
	my_system "/sbin/ifconfig tap1 mtu 1400";

#    } elsif ($SYSTEM_TYPE == 'FreeBSD') {
#	
#	$ifconfig_out = `/sbin/ifconfig $GRID_IF`;
#	$grid_hw_addr = "";
#	$old_ip = "";
#	$old_netmask = "";
#	$old_bcast = "";
#	$old_grid_dev_gw = "";
#	$old_grid_dev_net = "";
#	$tun_dev_type = "";
#
#	$lan_addr = "";
#	$lan_hw_addr = "";
#	$old_lan_netmask = "";
#	$old_lan_bcast = "";
#	$lan_gw = "";
#	$lan_net = "";
#
#	
#	if (!($ifconfig_out =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)) {
#	    print "Unable to get Grid device MAC address\n";
#	    exit 1;
#	}
#	else {
#	    $grid_hw_addr = $1;
#	}
#	if (!($ifconfig_out =~ /\n\s+inet (\d+.\d+.\d+.\d+)/)) {
#	    print "Unable to get old Grid device IP address\n";
#	}
#	else {
#	    $old_ip_addr = $1;
#	    if (!($old_ip_addr =~ /(\d+.\d+.\d+).\d+/)) {
#		print "Unable to get Grid device net address\n";
#		exit 1;
#	    }
#	    $old_grid_dev_net = "$1"; # keep as only the first 3 digits
#	}
#	if (!($ifconfig_out =~ /netmask (0x[0-9a-fA-F]{8})/)) {
#	    print "Unable to get old Grid device netmask\n";
#	}
#	else {
#	    $old_netmask = $1;
#	}
#	if (!($ifconfig_out =~ /broadcast (\d+.\d+.\d+.\d+)/)) {
#	    print "Unable to get old Grid device broadcast address\n";
#	}
#	else {
#	    $old_bcast = $1;
#	}
#
#	# get LAN device params for routing
#	$ifconfig_lan_out = `ifconfig $lan_if`;
#	if (!($ifconfig_lan_out =~ /(([a-fA-F0-9]{2}:){5}[0-9a-fA-F]{2})/)) {
#	    print "Unable to get LAN device MAC address\n";
#	    exit 1; # we really need to know that...
#	}
#	else {
#	    $lan_hw_addr = $1;
#	}
#	if (!($ifconfig_lan_out =~ /\n\s+inet (\d+.\d+.\d+.\d+)/)) {
#	    print "Unable to get LAN device IP address\n";
#	    exit 1;
#	}
#	else {
#	    $lan_addr = $1;
#	    if (!($lan_addr =~ /(\d+.\d+.\d+).\d+/)) {
#		print "Unable to get LAN device net address\n";
#		exit 1;
#	    }
#	    $lan_net = "$1"; # keep as only the first 3 digits
#	}
#	if (!($ifconfig_lan_out =~ /netmask (0x[0-9a-fA-f]{8})/)) {
#	    print "Unable to get LAN device netmask\n";
#	}
#	else {
#	    $old_lan_netmask = $1;
#	}
#	if (!($ifconfig_lan_out =~ /broadcast (\d+.\d+.\d+.\d+)/)) {
#	    print "Unable to get LAN device broadcast address\n";
#	}
#	else {
#	    $old_lan_bcast = $1;
#	}
#
#	# only know how to extract one default route -- whereas linux
#	# seems to be able to support multiple ``default'' routes!.
#	$route_info = `route -n get default`;
#	if (!($route_info =~ /\n\s+gateway: ($lan_net.\d+)/)) {
#	    print "Unable to get gateway\n";
#	    exit 1;
#	}
#	else {
#	    $lan_gw = $1;
#	}
#
#	$tun_dev = "tun";
#
#	# make sure grid interface is up
#	my_system "route -n delete default";
#	my_system "ifconfig $grid_if 0";
#
#	# set the adapter to ad-hoc mode
#	if ($RADIO_TYPE eq "wavelan") {
#	    my_system "wicontrol -i $grid_if -p 3";
#	    my_system "wicontrol -i $grid_if -f $grid_channel";
#	}
#	elsif ($RADIO_TYPE eq "aironet") {
#	    die "radio type $RADIO_TYPE is not supported yet on freebsd\n";
#	}
#
#	print "WARNING: not decreasing grid tun MTU.  Transfers with big packets will fail.  Fix this script!\n";
#
#	# remove default route
#	my_system, "route -n delete default";
#	# make sure LAN interface is up
#	my_system "ifconfig $lan_if 0";
	
    } else {
	
	die "this system type ($SYSTEM_TYPE) is not supported\n";

    }
}

sub do_cleanup {
    print "run_grid: cleaning up...\n";
    
    if ($SYSTEM_TYPE == 'OpenBSD') {	

	my_system "/sbin/ifconfig tun0 0";
	my_system "/sbin/ifconfig tun0 down";

	if ($IS_GATEWAY) {
	    my_system "/sbin/ifconfig tun1 0";
	    my_system "/sbin/ifconfig tun1 down";
	}

	my_system "/sbin/route delete default";
	my_system "/sbin/route flush";	
	my_system "sh /etc/netstart";

    } elsif ($SYSTEM_TYPE == 'Linux') {

#	my_system "/sbin/ifconfig $grid_if $old_ip_addr netmask $old_netmask broadcast $old_bcast";
#	my_system "wicontrol -i $grid_if -p 1";
#	
#	if ($IS_GATEWAY) {
#	    my_system "/sbin/route delete default";
#	    my_system "/sbin/route add default $OLD_GW";
#	}

   } elsif ($SYSTEM_TYPE == 'FreeBSD') {

    }    
}
