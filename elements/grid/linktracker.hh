#ifndef LINKTRACKERHH
#define LINKTRACKERHH

/*
 * =c
 * LinkTracker(TAU)
 * =s Grid
 * =d
 *
 * Expects Grid packets as input.  Extracts ping-ponged link stat info
 * from unicast packet headers and incorporates it into runnng
 * averages.  TAU is the time constant to use for the
 * exponential decay averaging, in milliseconds.
 *
 * =a
 * AiroInfo, LinkStat, PingPong */

#include <click/bighashmap.hh>
#include <click/element.hh>
#include <click/glue.hh>
#include <click/ipaddress.hh>


class LinkTracker : public Element {

  double _tau;

  static String read_stats(Element *, void *);

  struct stat_t {
    double qual_top;
    double qual_bot;
    double sig_top;
    double sig_bot;
    struct timeval last_data; // when last data was generated by other end of link (other node's time)
    struct timeval last_update; // when we last updated the data (our time)
  };

  BigHashMap<IPAddress, stat_t> _stats;
  
public:
  void add_stat(IPAddress dst, int sig, int qual, struct timeval when);
  bool get_stat(IPAddress dst, int &sig, int &qual, struct timeval &last_update);
  void remove_stat(IPAddress dst);
  
  LinkTracker();
  ~LinkTracker();
  
  const char *class_name() const		{ return "LinkTracker"; }
  const char *processing() const		{ return "a/a"; }
  
  LinkTracker *clone() const;

  void add_handlers();

  int configure(Vector<String> &, ErrorHandler *);
  int initialize(ErrorHandler *);

  Packet *simple_action(Packet *);
};

#endif
