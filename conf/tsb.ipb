# tsb's end of the tunnel between net 18.26.4
# and punish.uun.org, used to forward to nephron.lcs.mit.edu (18.26.4.99).
# proxy arp for nephron.lcs.mit.edu, encapsulate
# resulting IP packets, send to punish.
#   LCS hosts -> tsb -> (encap tunnel) -> punish.uun.org -> nephron
# Also un-encapsulate packets from punish.

# Classifier 5 kinds of input packets:
# 0. IPIP packets from punish to tsb.
# 1. ARP queries.
# 2. ARP responses.
# 3. IP packets to nephron.
# 4. Others.
fi :: Classifier(12/0800 23/04 30/121A04C8,
             12/0806 20/0001,
             12/0806 20/0002,
             12/0800 30/121a0463,
             -);

FromBPF(fxp0) -> [0]fi;
outq :: Queue(20) -> ToBPF(fxp0);

sn :: SnoopTCP;

# Common code to send IP packets, including ARP.
# IP dst annotation must already be set.
arpq :: ARPQuerier(18.26.4.200, 00:a0:c9:9c:fd:9c);
fi[2] -> Print(gotresponse) -> [1]arpq;
arpq[0] -> outq;

# Proxy ARP for nephron.lcs.mit.edu.
arpr :: ARPResponder(18.26.4.99 00:a0:c9:9c:fd:9c);
fi[1] -> arpr;
arpr -> outq;

# Un-encapsulate IPIP packets and forward them.
# These packets could have anything as the destination.
# We really need a default route, net routes, &c.
# For now, assume they're to the LCS net.
fi[0] -> Strip(14)
      -> CheckIPHeader
      -> DecIPTTL
      -> Strip(20)
      -> [1]sn;
sn[1] -> Print(ipip)
      -> GetIPAddress(16)
      -> [0]arpq;

# Encapsulate all IP packets to nephron via punish.
fi[3] -> Strip(14)
      -> CheckIPHeader
      -> DecIPTTL
#     -> SetIPChecksum
      -> [0]sn;
sn[0] -> IPEncap(4, 18.26.4.200, 18.23.10.83)
      -> GetIPAddress(16)
      -> LookupIPRoute(18.23.10.83 18.26.4.1)
      -> [0]arpq;

fi[4] -> Discard;
