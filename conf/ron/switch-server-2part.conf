
// for switch

require(ron);

// ---- ARP machinery ----
arpq :: ARPQuerier(18.26.4.104, 00:90:27:32:28:DB);
from0 :: FromDevice(eth0)
from0	-> c :: Classifier(12/0806 20/0002, -)
	-> [1]arpq;
c[1] -> Discard;

setgw :: SetIPAddress(18.26.4.1)
	-> arpq
	-> Queue(100)
	-> ToDevice(eth0);

iprw :: IPRewriter(
	pattern 18.26.4.104 50000-50099 - - 0 1,
	drop);


// Incoming Encapsulated Packets 
DivertSocket(eth0, 3000, 2, 4, 0.0.0.0/0, 18.26.4.104, in)
	-> CheckIPHeader
//	-> Print(IN-ENCAP-RAW)
	-> IPPrint(IN-ENCAP-RAW)
	-> StripIPHeader
	-> CheckIPHeader
	-> IPPrint(IN-ENCAP-STR)
	-> IPReassembler
	-> CheckIPHeader
	-> [0]iprw;


// Incoming NAT reply packets
DivertSocket(eth0, 3001, 2, 6, 0.0.0.0/0, 18.26.4.104, 50000-50099, in)
	-> CheckIPHeader
	-> IPPrint(IN-NAT______)
	-> frag0 :: IPFragmenter(1400)
	-> IPReassembler
	-> IPReassembler
	-> CheckIPHeader
	-> [1]iprw;

iprw[0] -> setgw;
iprw[1] -> CheckIPHeader
	-> IPPrint(Rewritten1__)
	-> frag1 :: IPFragmenter(1400)
	-> IPEncap(4, 18.26.4.104, 18.26.4.89)
	-> setgw;

icmperror :: ICMPError(18.26.4.104, 3, 4)
	-> setgw;

frag0[1] -> icmperror;
frag1[1] -> icmperror;



