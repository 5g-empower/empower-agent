dnl Process this file with autoconf to produce a configure script.
AC_INIT(acconfig.h)
AC_SUBST(ac_configure_args)
PACKAGE=click
VERSION=1.1
AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE")
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_CONFIG_HEADER(config.h)

AC_PROG_CC
AC_PROG_CPP

AC_PROG_RANLIB
AC_PROG_INSTALL

dnl
dnl check for C++
dnl

AC_PROG_CXX
AC_PROG_CXXCPP

if test -z "$GXX"; then
  AC_MSG_WARN(Your C++ compiler ($CXX) is not a GNU C++ compiler!
Either set the "'`'"CXX' environment variable to tell me where
[a GNU C++ compiler is, or compile at your own risk.
(This code uses a few GCC extensions and GCC-specific compiler options,
and Linux header files are really GCC-specific.)])
fi

AC_LANG_CPLUSPLUS
AC_CACHE_CHECK(for recent version of C++, ac_cv_good_cxx,
  AC_TRY_COMPILE([], [#ifdef __GNUG__
#if (__GNUC__ == 2) && (__GNUC_MINOR__ <= 7)
#error "fuckers! fuckers!"
#endif
#endif
return 0;], ac_cv_good_cxx=yes, ac_cv_good_cxx=no))
if test "$ac_cv_good_cxx" != yes; then
  AC_MSG_ERROR(Your GNU C++ compiler ($CXX) is too old!
[Either download a newer compiler, or tell me to use a different compiler
by setting the "'`'"CXX' environment variable and rerunning me.])
fi

dnl look for particular things in G++

AC_CACHE_CHECK(for working new.h, ac_cv_good_new_h,
  AC_TRY_RUN([#include <new.h>
int main(int c, char **v) {
  int a;
  int *b = new(&a) int;
  return 0;
}], ac_cv_good_new_h=yes, ac_cv_good_new_h=no, ac_cv_good_new_h=no))
if test "$ac_cv_good_new_h" = yes; then
  AC_DEFINE(HAVE_NEW_H)
fi

dnl set C++ compiler options

CPPFLAGS="$CPPFLAGS"
if test -n "$GCC"; then
  CC="$CC -Wall"
fi
if test -n "$GXX"; then
  CXX="$CXX -Wp,-w -W -Wall"; KERNEL_CXX="$CXX -w -Wall"
else
  KERNEL_CXX="$CXX"
fi
if test -n "$GXX"; then
  CXXFLAGS="-fno-exceptions -fno-rtti -fvtable-thunks $CXXFLAGS"
fi
AC_SUBST(KERNEL_CXX)

dnl
dnl autoconf and autoheader
dnl

missing_dir=`cd $srcdir && pwd`

AC_MSG_CHECKING(for working autoheader)
if (autoheader --version) < /dev/null > /dev/null 2>&1; then
  AUTOHEADER=autoheader
  AC_MSG_RESULT(found)
else
  AUTOHEADER="$missing_dir/missing autoheader"
  AC_MSG_RESULT(missing)
fi

AC_MSG_CHECKING(for working autoconf)
if (autoconf --version) < /dev/null > conftest.out 2>&1; then
  if test `head -1 conftest.out | sed 's/.*2\.\([[0-9]]*\).*/\1/'` -ge 13 2>/dev/null; then
    AUTOCONF=autoconf
    AC_MSG_RESULT(found)
  else
    AUTOCONF="$missing_dir/missing autoconf"
    AC_MSG_RESULT(old)
  fi
else
  AUTOCONF="$missing_dir/missing autoconf"
  AC_MSG_RESULT(missing)
fi

AC_SUBST(AUTOHEADER)
AC_SUBST(AUTOCONF)

dnl
dnl build userlevel? Linux module?
dnl

AC_ARG_ENABLE(userlevel, [  --enable-userlevel      enable user-level driver (on by default)], :, enable_userlevel=yes)
AC_ARG_ENABLE(linuxmodule, [  --enable-linuxmodule    enable Linux kernel driver (on by default)], :, enable_linuxmodule=yes)

AC_ARG_WITH(linux, [  --with-linux[=DIR]      compile Linux kernel module; Linux sources in DIR],
  [linuxdir=$withval; if test -z "$withval" -o "$withval" = yes; then linuxdir=/usr/src/linux; fi],
  linuxdir=NONE)

if test $linuxdir = NONE; then
  if test -d /usr/src/linux; then
    linuxdir=/usr/src/linux
  else
    AC_MSG_WARN([can't find /usr/src/linux; not compiling for Linux
  (or try the --with-linux=DIR option)])
  fi
fi

ac_under_linux=n
if test $linuxdir != NONE -a $linuxdir != no -a $enable_linuxmodule = yes; then
  if test -r $linuxdir/include/linux/skbuff.h; then
    ac_under_linux=y
  else
    AC_MSG_ERROR([can't find $linuxdir/include/linux/skbuff.h:
  are you sure $linuxdir holds the Linux source code?])
  fi
fi
AC_SUBST(linuxdir)

dnl
dnl element collections
dnl

dnl ELEMENTS_ARG_ENABLE(COLLECTION, HELP-STRING, DEFAULT-VALUE)
element_groups=""
AC_SUBST(element_groups)
AC_DEFUN(ELEMENTS_ARG_ENABLE,
[AC_ARG_ENABLE($1, builtin(format, [  --enable-%-14s %s], [$1], [[$2]]), ,
[enable_]patsubst([$1], -, _)=$3)dnl
if test ["x$enable_]patsubst([$1], -, _)["] = xyes; then
  element_groups="$element_groups $1"
  $4
fi])

ELEMENTS_ARG_ENABLE(standard, [include standard elements (on by default)], yes)
ELEMENTS_ARG_ENABLE(ethernet, [include Ethernet elements (on by default)], yes)
ELEMENTS_ARG_ENABLE(ip, [include IP, UDP, and TCP elements (on by default)], yes)
ELEMENTS_ARG_ENABLE(ip6, [include IPv6 elements (EXPERIMENTAL)], no, AC_DEFINE(HAVE_IP6))
ELEMENTS_ARG_ENABLE(app, [include application-level elements (on by default)], yes)
ELEMENTS_ARG_ENABLE(etherswitch, [include Ethernet switch elements (EXPERIMENTAL)], yes)
dnl ELEMENTS_ARG_ENABLE(ipsec, [include IP security elements], no, AC_DEFINE(HAVE_IPSEC))
ELEMENTS_ARG_ENABLE(radio, [include radio elements (EXPERIMENTAL)], no)
ELEMENTS_ARG_ENABLE(local, [include local elements], no)
ELEMENTS_ARG_ENABLE(grid, [include Grid elements (see FAQ)], no)

elements_vpath=`echo "$element_groups" | sed -e ['s/ \([^ ][^ ]*\)/:$(top_srcdir)\/elements\/\1/g']`
AC_SUBST(elements_vpath)

dnl
dnl make FLAGS variables without `-g'
dnl

CFLAGS_NDEBUG=`echo "$CFLAGS" | sed 's/-g//'`
CXXFLAGS_NDEBUG=`echo "$CXXFLAGS" | sed 's/-g//'`
AC_SUBST(CFLAGS_NDEBUG)
AC_SUBST(CXXFLAGS_NDEBUG)

dnl
dnl strerror
dnl

AC_REPLACE_FUNCS(strerror)

dnl
dnl dynamic linking
dnl

AC_CHECK_HEADERS(unistd.h dlfcn.h)
DL_LIBRARY=
AC_CHECK_FUNC(dlopen, [AC_DEFINE(HAVE_LIBDL)],
[AC_CHECK_LIB(dl, dlopen, [AC_DEFINE(HAVE_LIBDL)
DL_LIBRARY="-ldl"])])
AC_SUBST(DL_LIBRARY)

dnl
dnl sockets
dnl

SOCKET_LIBS=
dnl AC_CHECK_LIB(nsl, gethostbyname, SOCKET_LIBS="-lnsl $SOCKET_LIBS")
AC_CHECK_LIB(socket, connect, SOCKET_LIBS="-lsocket $SOCKET_LIBS")
AC_SUBST(SOCKET_LIBS)

dnl
dnl check for stuff in the linux kernel
dnl

if test $ac_under_linux = y; then

if test ! -f $linuxdir/System.map; then
  AC_MSG_ERROR(can't find $linuxdir/System.map)
fi

AC_CACHE_CHECK(for Click Linux kernel extensions, ac_cv_click_kernel,
[if grep register_net_out $linuxdir/System.map >/dev/null 2>&1; then
  ac_cv_click_kernel=yes
else ac_cv_click_kernel=no; fi])
if test $ac_cv_click_kernel = yes; then
  AC_DEFINE_UNQUOTED(HAVE_CLICK_KERNEL, 1)
fi

AC_CACHE_CHECK(for read_net_skbcount kernel extension, ac_cv_read_net_skbcount,
[if grep read_net_skbcount $linuxdir/System.map >/dev/null 2>&1; then
  ac_cv_read_net_skbcount=yes
else ac_cv_read_net_skbcount=no; fi])
if test $ac_cv_read_net_skbcount = yes; then
  AC_DEFINE_UNQUOTED(HAVE_READ_NET_SKBCOUNT, 1)
fi

AC_CACHE_CHECK(for tcp_prot kernel symbol, ac_cv_tcp_prot,
[if grep 'D tcp_prot$' $linuxdir/System.map >/dev/null 2>&1; then
  ac_cv_tcp_prot=yes
else ac_cv_tcp_prot=no; fi])
if test $ac_cv_tcp_prot = yes; then
  AC_DEFINE_UNQUOTED(HAVE_TCP_PROT, 1)
fi

AC_CACHE_CHECK(for device polling kernel extension, ac_cv_poll_extension,
[if grep polling $linuxdir/include/linux/netdevice.h >/dev/null 2>&1; then
  ac_cv_poll_extension=yes
else ac_cv_poll_extension=no; fi])
if test $ac_cv_poll_extension = yes; then
  AC_DEFINE_UNQUOTED(HAVE_POLLING, 1)
fi

AC_CACHE_CHECK(for SKB reuse kernel extension, ac_cv_skb_reuse,
[if grep reuse_skb $linuxdir/include/linux/netdevice.h >/dev/null 2>&1; then
  ac_cv_skb_reuse=yes
else ac_cv_skb_reuse=no; fi])
if test $ac_cv_skb_reuse = yes; then
  AC_DEFINE_UNQUOTED(HAVE_REUSE_SKB, 1)
fi

AC_CACHE_CHECK(for SMP, ac_cv_smp,
[if grep "#define CONFIG_SMP 1" $linuxdir/include/linux/autoconf.h >/dev/null 2>&1; then
  ac_cv_smp=yes
else ac_cv_smp=no; fi])
if test $ac_cv_smp = yes; then
  AC_DEFINE_UNQUOTED(__SMP__, 1)
  KERNEL_CXX="$KERNEL_CXX -D__SMP__"
fi

fi


dnl
dnl type of scheduling
dnl

AC_ARG_ENABLE(stride, [  --enable-stride         enable stride scheduler (on by default)], :, enable_stride=yes)
if test $enable_stride = yes; then
  AC_DEFINE_UNQUOTED(HAVE_STRIDE_SCHED, 1)
fi


dnl
dnl debugging malloc
dnl

AC_ARG_ENABLE(dmalloc, [  --enable-dmalloc        enable debugging malloc], :, enable_dmalloc=no)
if test $enable_dmalloc = yes; then
  AC_DEFINE_UNQUOTED(CLICK_DMALLOC, 1)
fi


dnl
dnl check for GNU make
dnl

if test ${GMAKE-NO} = NO; then
  AC_CACHE_CHECK(for GNU make, ac_cv_gnu_make,
[if /bin/sh -c 'make -f /dev/null -n --version | grep GNU' >/dev/null 2>&1; then
  ac_cv_gnu_make='make'
elif /bin/sh -c 'gmake -f /dev/null -n --version | grep GNU' >/dev/null 2>&1; then
  ac_cv_gnu_make='gmake'
else
  AC_MSG_RESULT(not found)
  AC_MSG_ERROR(can't find GNU make. Either put "'`'"gmake' on your PATH and
rerun "'`'"./configure', or set the GMAKE environment variable to
GNU make's pathname.)
fi])
  GMAKE="$ac_cv_gnu_make"
fi

SUBMAKE=''
AC_SUBST(SUBMAKE)
if test $GMAKE != make; then
  AC_MSG_WARN(You must compile with GNU make ("'`'"$GMAKE').)
  SUBMAKE="MAKE = $ac_cv_gnu_make"
fi

dnl
dnl possible targets
dnl

POSSIBLE_TARGETS="linuxmodule userlevel"
AC_SUBST(POSSIBLE_TARGETS)
if test -d $srcdir/exopc; then
  POSSIBLE_TARGETS="$POSSIBLE_TARGETS exopc"
fi

dnl
dnl default targets
dnl

TARGETS=
AC_SUBST(TARGETS)
TOOLDIRS="click-align click-check click-combine click-devirtualize click-fastclassifier click-install click-undead click-xform udpgen"
TOOL_TARGETS="click-align click-check click-combine click-devirtualize click-fastclassifier click-undead click-xform"
if test -d $srcdir/tools/click-ipopt; then
  TOOLDIRS="$TOOLDIRS click-ipopt"
  TOOL_TARGETS="$TOOLDIRS click-ipopt"
fi
AC_SUBST(TOOLDIRS)
AC_SUBST(TOOL_TARGETS)

dnl check userlevel for pcap library

if test "$enable_userlevel" = yes; then

  if test "${PCAP_HEADER_PATH-NO}" != NO; then
    ac_cv_pcap_header_path="$PCAP_HEADER_PATH"
  else
    saveflags="$CPPFLAGS"
    AC_CACHE_CHECK(for pcap.h, ac_cv_pcap_header_path,
      AC_TRY_CPP([#include <pcap.h>], ac_cv_pcap_header_path="found",
       CPPFLAGS="$saveflags -I/usr/include/pcap"
       AC_TRY_CPP([#include <pcap.h>], ac_cv_pcap_header_path="-I/usr/include/pcap",
        CPPFLAGS="$saveflags -I/usr/local/include/pcap"
        AC_TRY_CPP([#include <pcap.h>], ac_cv_pcap_header_path="-I/usr/local/include/pcap",
         ac_cv_pcap_header_path="not found"))))
    if test "$ac_cv_pcap_header_path" = "found"; then
      PCAP_HEADER_PATH=""
    elif test "$ac_cv_pcap_header_path" != "not found"; then
      PCAP_HEADER_PATH="$ac_cv_pcap_header_path"
    fi
    if test "$ac_cv_pcap_header_path" != "not found"; then
      CPPFLAGS="$saveflags $PCAP_HEADER_PATH"
      AC_CACHE_CHECK(for bpf_timeval in pcap.h, ac_cv_bpf_timeval,
        AC_EGREP_HEADER(bpf_timeval, pcap.h, ac_cv_bpf_timeval=yes, ac_cv_bpf_timeval=no))
      if test "$ac_cv_bpf_timeval" = yes; then
        AC_DEFINE(HAVE_BPF_TIMEVAL)
      fi
    fi
    CPPFLAGS="$saveflags"
  fi

  if test ${PCAP_LIBRARY_PATH-NO} != NO; then
    ac_cv_pcap_header_path="$PCAP_LIBRARY_PATH"
    PCAP_LIBRARY="-lpcap"
  else
    saveflags="$LDFLAGS"
    savelibs="$LIBS"
    LIBS="$savelibs -lpcap"
    AC_CACHE_CHECK(for -lpcap, ac_cv_pcap_library_path,
      AC_LANG_C
      AC_TRY_LINK_FUNC(pcap_open_live, ac_cv_pcap_library_path="found",
       LDFLAGS="$saveflags -L/usr/local/lib"
       AC_TRY_LINK_FUNC(pcap_open_live, ac_cv_pcap_library_path="-L/usr/local/lib",
        ac_cv_pcap_library_path="not found")))
    LDFLAGS="$saveflags"
    LIBS="$savelibs"
    if test "$ac_cv_pcap_library_path" = "found"; then
      PCAP_LIBRARY_PATH=""
      PCAP_LIBRARY="-lpcap"
    elif test "$ac_cv_pcap_library_path" != "not found"; then
      PCAP_LIBRARY_PATH="$ac_cv_pcap_library_path"
      PCAP_LIBRARY="-lpcap"
    fi
  fi

  if test "$ac_cv_pcap_library_path" = "not found" -o "$ac_cv_pcap_library_path" = "not found"; then
    AC_MSG_WARN(pcap.h or -lpcap not found; user-level driver can't steal packets)
  else
    AC_DEFINE_UNQUOTED(HAVE_PCAP, 1)
  fi

  TARGETS="$TARGETS userlevel"
fi
AC_SUBST(PCAP_HEADER_PATH)
AC_SUBST(PCAP_LIBRARY_PATH)
AC_SUBST(PCAP_LIBRARY)

dnl check linuxmodule for Linux

if test $ac_under_linux = y; then
  AC_CACHE_CHECK(for C++-includable system header files,
    ac_cv_cxx_aware_system,
    AC_LANG_CPLUSPLUS
    AC_TRY_RUN([#include <signal.h>
int main(int c, char **v) {
  return 0;
}], ac_cv_cxx_aware_system=yes, ac_cv_cxx_aware_system=no, 
    ac_cv_cxx_aware_system=no))
  if test $ac_cv_cxx_aware_system = yes; then
    TARGETS="$TARGETS linuxmodule"
    TOOL_TARGETS="$TOOL_TARGETS click-install udpgen"
    AC_DEFINE_UNQUOTED(HAVE_LINUXMODULE_TARGET, 1)
    SAVE_CXX="$CXX"
    CXX="$KERNEL_CXX"

    dnl include the correct version of Linux
    saveflags="$CPPFLAGS"
    CPPFLAGS="$saveflags -I$linuxdir/include"

    AC_CACHE_CHECK(whether -fpermissive is required, ac_cv_f_permissive,
      AC_LANG_CPLUSPLUS
      AC_TRY_LINK([#define __KERNEL__
#define MODULE
#define _FEATURES_H
#define new xxx_new
#define this xxx_this
#define delete xxx_delete
#define class xxx_class
#include <linux/skbuff.h>], [], 
	ac_cv_f_permissive=no, ac_cv_f_permissive=yes))

    CXX="$SAVE_CXX"
    CPPFLAGS="$saveflags"
    if test $ac_cv_f_permissive = yes; then
      KERNEL_CXX="$KERNEL_CXX -fpermissive"
    fi
  else
    AC_MSG_WARN(Your header files must be patched before a C++ program
can include them. Apply the patch that came with this distribution
if you want to compile Click as a Linux module.)
  fi
fi

dnl
dnl Perl5
dnl

if test ${PERL-NO} = NO; then
  AC_CHECK_PROGS(perl5, perl5 perl, missing)
  if test $perl5 = missing || $perl5 -e 'exit($^V < 5);'; then
    AC_CHECK_PROGS(perl5_local, perl5 perl, missing, /usr/local/bin)
    if test "$perl5_local" != "missing"; then
      perl5="/usr/local/bin/$perl5_local"
    fi
  fi
  if test "$perl5" = "missing"; then
    AC_MSG_WARN(I can't find Perl 5, so I won't be able to make 
manual pages for you.)
    PERL="$missing_dir/missing perl"
  else
    PERL="$perl5"
  fi
fi
AC_SUBST(PERL)

dnl
dnl Output
dnl

config_files="Makefile mkelemlist.sh click-compile tools/Makefile tools/lib/Makefile doc/Makefile"
for dir in $POSSIBLE_TARGETS; do
  config_files="$config_files $dir/Makefile"
done
for dir in $TOOLDIRS; do
  config_files="$config_files tools/$dir/Makefile"
done

AC_OUTPUT_COMMANDS([chmod +x mkelemlist.sh
if test ${CONFIG_ELEMLISTS-yes} = yes; then
  echo creating element lists
  /bin/sh mkelemlist.sh
fi])
AC_OUTPUT($config_files)
