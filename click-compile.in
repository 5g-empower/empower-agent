#!/bin/sh

# click-compile.in -- script compiles Click elements
# Eddie Kohler
#
# Copyright (c) 1999 Massachusetts Institute of Technology
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# Further elaboration of this license, including a DISCLAIMER OF ANY
# WARRANTY, EXPRESS OR IMPLIED, is provided in the LICENSE file, which is
# also accessible at http://www.pdos.lcs.mit.edu/click/license.html

prefix=@prefix@
exec_prefix=@exec_prefix@
includedir=@includedir@/click
srcdir=@datadir@/click/src
linuxdir=@linuxdir@

# determine mode
target=
package=NONE
cflags=
compileflag=-c
while true; do
  bad=x
  case $1 in
    -t|--t|--ta|--tar|--targ|--targe|--target)
      target=$2; shift 2;;
    --t=*|--ta=*|--tar=*|--targ=*|--targe=*|--target=*)
      target=`echo "$1" | sed 's/[-a-z]*=//'`; shift 1;;
    -p|--p|--pa|--pac|--pack|--packa|--packag|--package)
      package=$2; shift 2;;
    --p=*|--pa=*|--pac=*|--pack=*|--packa=*|--packag=*|--package=*)
      package=`echo "$1" | sed 's/[-a-z]*=//'`; shift 1;;
    -h|--h|--he|--hel|--help)
      cat <<'EOF' 1>&2
`Click-compile' compiles a Click source file.

Usage: click-compile -t TARGET [OPTIONS] SOURCEFILE...

Options:
  -t, --target TARGET     Sets target to `kernel', `user', or `tool'.
  -p, --package PACKAGE   Build a dynamically loadable package named PACKAGE.
  -h, --help              Print this message and exit.
  Other options are passed to the compiler unchanged.

Report bugs to <click@pdos.lcs.mit.edu>.
EOF
      exit 0;;
    -*)
      if test $1 = -E -o $1 = -c -o $1 = -S; then
        compileflag=$1
      else cflags="$cflags '$1'"; fi
      shift 1;;
    *)
      bad=;;
  esac
  if test -z "$bad"; then break; fi
done

# test directory function
function test_dir () {
  test -d "$1" -a -d "$1/elements" -a -d "$1/lib"
}

# analyze CLICKPATH
path=${CLICKPATH-:}
tried_defaults=
found_srcdir=
while true; do
  case $path in
    :*)
      if test -z "$tried_defaults" && test_dir "$srcdir"; then
        found_srcdir="$srcdir"
      else
        tried_defaults=y
      fi
      path=`echo "$path" | sed 's/://'`
      ;;
    *:*)
      dir=`echo "$path" | sed 's/:.*//'`
      if test_dir "$dir"; then found_srcdir="$dir"; fi
      path=`echo "$path" | sed 's/[^:]*://'`
      ;;
    *:)
      dir=`echo "$path" | sed 's/:.*//'`
      if test_dir "$dir"; then found_srcdir="$dir"; fi
      path=":"
      ;;
    *)
      if test_dir "$path"; then found_srcdir="$path"; fi
      path=""
      ;;
  esac
  if test -z "$path" -o -n "$found_srcdir"; then break; fi
done

if test -z "$found_srcdir"; then
  echo "click-compile: cannot find Click sources!" 1>&2
  echo "click-compile: (Either run \`make install' to put the sources in" 1>&2
  echo "click-compile: $srcdir, or set CLICKPATH" 1>&2
  echo "click-compile: to point to your source directory.)" 1>&2
  exit 1
fi


case $target in
  k|ke|ker|kern|kerne|kernel|m|mo|mod|modu|modul|module)
    idefs="@DEFS@ -DCLICK_LINUXMODULE"
    iincludes="-I${found_srcdir} -I${found_srcdir}/lib -I${linuxdir}/include"
    icxxflags="@CXXFLAGS_NDEBUG@"
    command="${CXX-@KERNEL_CXX@} ${DEFS-$idefs} ${INCLUDES-$iincludes} ${CPPFLAGS-} ${CXXFLAGS-$icxxflags} $cflags $compileflag"
    target=module;;
  u|us|use|user)
    idefs="@DEFS@ -DCLICK_USERLEVEL"
    iincludes="-I${found_srcdir} -I${found_srcdir}/lib"
    icxxflags="@CXXFLAGS@"
    command="${CXX-@CXX@} ${DEFS-$idefs} ${INCLUDES-$iincludes} ${CPPFLAGS-} ${CXXFLAGS-$icxxflags} $cflags $compileflag"
    target=user;;
  t|to|too|tool)
    idefs="@DEFS@ -DCLICK_TOOL"
    iincludes="-I${found_srcdir} -I${found_srcdir}/lib"
    icxxflags="@CXXFLAGS@"
    command="${CXX-@CXX@} ${DEFS-$idefs} ${INCLUDES-$iincludes} ${CPPFLAGS-} ${CXXFLAGS-$icxxflags} $cflags $compileflag"
    target=tool;;
  "")
    echo "click-compile: you must specify a target" 1>&2; exit 1;;
  *)
    echo "click-compile: acceptable targets are \`kernel', \`user', and \`tool'" 1>&2; exit 1;;
esac

# do stuff
if test "x$package" != "xNONE"; then
  for file; do
    echo $command $file 1>&2
    eval $command $file || exit 1
    files="$files "`echo $file | sed 's/\.c*$/\.o/;s/^.*\///'`
  done
  if test $target = module; then
    vfile=kernelversion
    trap 'rm -f $vfile.c $vfile.o; exit 1' 1 2 15
    cat > $vfile.c << EOF
#define __KERNEL__
#define MODULE
#include <linux/module.h>
/* a new version of EXPORT_NO_SYMBOLS that works */
const int __ksymtab_nothing[0] __attribute__((section("__ksymtab"))) = { };
EOF
    command="${CC-@CC@ -w} -I${linuxdir}/include -c $vfile.c"
    echo $command 1>&2
    eval $command || (rm -f $vfile.*; exit 1)
    command="ld -r -o $package $files $vfile.o"
    echo $command 1>&2
    eval $command || (rm -f $vfile.*; exit 1)
    rm -f $vfile.*
    exit 0 
  elif test $target = user; then
    command="ld -shared -o $package $files"
    echo $command 1>&2
    eval $command
    exit 0
  fi
else
  echo $command "$@" 1>&2
  eval $command "$@"
fi
